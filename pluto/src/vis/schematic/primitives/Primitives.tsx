// Copyright 2024 Synnax Labs, Inc.
//
// Use of this software is governed by the Business Source License included in the file
// licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with the Business Source
// License, use of this software will be governed by the Apache License, Version 2.0,
// included in the file licenses/APL.txt.

import "@/vis/schematic/primitives/Primitives.css";

import { dimensions, direction, type location, xy } from "@synnaxlabs/x";
import {
  Handle as RFHandle,
  type HandleProps as RFHandleProps,
  Position as RFPosition,
  useUpdateNodeInternals,
} from "@xyflow/react";
import {
  type ComponentPropsWithoutRef,
  type CSSProperties,
  type MouseEventHandler,
  type PropsWithChildren,
  type ReactElement,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";

import { type Align } from "@/align";
import { Button as CoreButton } from "@/button";
import { Color } from "@/color";
import { CSS } from "@/css";
import { Input } from "@/input";
import { Text } from "@/text";
import { Theming } from "@/theming";

import st from "./st.png";

interface PathProps extends ComponentPropsWithoutRef<"path"> {}

const Path = (props: PathProps): ReactElement => (
  <path vectorEffect="non-scaling-stroke" {...props} />
);

interface RectProps extends ComponentPropsWithoutRef<"rect"> {}

const Rect = (props: RectProps): ReactElement => (
  <rect vectorEffect="non-scaling-stroke" {...props} />
);

interface CircleProps extends ComponentPropsWithoutRef<"circle"> {}

const Circle = (props: CircleProps): ReactElement => (
  <circle vectorEffect="non-scaling-stroke" {...props} />
);

interface LineProps extends ComponentPropsWithoutRef<"line"> {}

const Line = (props: LineProps): ReactElement => (
  <line vectorEffect="non-scaling-stroke" {...props} />
);

const ORIENTATION_RF_POSITIONS: Record<
  location.Outer,
  Record<location.Outer, RFPosition>
> = {
  left: {
    left: RFPosition.Left,
    right: RFPosition.Right,
    top: RFPosition.Top,
    bottom: RFPosition.Bottom,
  },
  right: {
    left: RFPosition.Right,
    right: RFPosition.Left,
    top: RFPosition.Bottom,
    bottom: RFPosition.Top,
  },
  top: {
    left: RFPosition.Bottom,
    right: RFPosition.Top,
    top: RFPosition.Left,
    bottom: RFPosition.Right,
  },
  bottom: {
    left: RFPosition.Top,
    right: RFPosition.Bottom,
    top: RFPosition.Right,
    bottom: RFPosition.Left,
  },
};

const smartPosition = (
  position: location.Outer,
  orientation: location.Outer,
): RFPosition => ORIENTATION_RF_POSITIONS[orientation][position];

const swapRF = (position: RFPosition, bypass: boolean = false): RFPosition => {
  if (bypass) return position;
  switch (position) {
    case RFPosition.Left:
      return RFPosition.Right;
    case RFPosition.Right:
      return RFPosition.Left;
    case RFPosition.Top:
      return RFPosition.Bottom;
    case RFPosition.Bottom:
      return RFPosition.Top;
    default:
      return RFPosition.Top;
  }
};

const adjustHandle = (
  top: number,
  left: number,
  orientation: location.Outer,
  prevent: boolean = false,
): { left: number; top: number } => {
  if (prevent) return { left, top };
  if (orientation === "left") return { top, left };
  if (orientation === "right") return { top: 100 - top, left: 100 - left };
  if (orientation === "top") return { top: 100 - left, left: top };
  return { top: left, left: 100 - top };
};

interface OrientableProps {
  orientation?: location.Outer;
}

interface SmartHandlesProps extends PropsWithChildren<{}> {
  orientation: location.Outer;
  refreshDeps?: unknown;
}

const HandleBoundary = ({
  children,
  orientation,
  refreshDeps,
}: SmartHandlesProps): ReactElement => {
  let updateInternals: ReturnType<typeof useUpdateNodeInternals> | undefined;
  try {
    updateInternals = useUpdateNodeInternals();
  } catch {
    return <></>;
  }
  const ref = useRef<HTMLDivElement & HTMLButtonElement>(null);
  const first = useRef<boolean>(true);
  useEffect(() => {
    if (ref.current == null) return;
    if (first.current) {
      first.current = false;
      return;
    }
    const node = ref.current.closest(".react-flow__node");
    const id = node?.getAttribute("data-id");
    if (id == null) return;
    updateInternals?.(id);
  }, [orientation, refreshDeps]);
  return (
    <>
      <span ref={ref} />
      {children}
    </>
  );
};

interface HandleProps extends Omit<RFHandleProps, "type" | "position"> {
  orientation: location.Outer;
  location: location.Outer;
  position?: RFPosition;
  preventAutoAdjust?: boolean;
  swap?: boolean;
  left: number;
  top: number;
  id: string;
}

const Handle = ({
  location,
  orientation,
  preventAutoAdjust,
  left,
  swap,
  top,
  style,
  ...props
}: HandleProps): ReactElement => {
  const adjusted = adjustHandle(top, left, orientation, preventAutoAdjust);
  return (
    <RFHandle
      position={swapRF(smartPosition(location, orientation), !swap)}
      {...props}
      type="source"
      onClick={(e) => e.stopPropagation()}
      className={(CSS.B("handle"), CSS.BE("handle", props.id))}
      style={{
        left: `${adjusted.left}%`,
        top: `${adjusted.top}%`,
        ...style,
      }}
    />
  );
};

interface ToggleProps
  extends Omit<ComponentPropsWithoutRef<"button">, "color" | "value"> {
  triggered?: boolean;
  enabled?: boolean;
  color?: Color.Crude;
}

interface ToggleValveButtonProps extends ToggleProps, OrientableProps {}

const Toggle = ({
  className,
  enabled = false,
  triggered = false,
  orientation = "left",
  color,
  ...props
}: ToggleValveButtonProps): ReactElement => (
  <button
    className={CSS(
      CSS.B("symbol-primitive"),
      CSS.B("symbol-primitive-toggle"),
      orientation != null && CSS.loc(orientation),
      enabled && CSS.M("enabled"),
      triggered && CSS.M("triggered"),
      className,
    )}
    color={Color.cssString(color)}
    {...props}
  />
);

interface DivProps
  extends Omit<ComponentPropsWithoutRef<"div">, "color" | "onResize">,
    OrientableProps {}

const Div = ({ className, ...props }: DivProps): ReactElement => (
  <div className={CSS(CSS.B("symbol-primitive"), className)} {...props} />
);

interface SVGBasedPrimitiveProps extends OrientableProps {
  color?: Color.Crude;
  scale?: number;
}

interface InternalSVGProps
  extends SVGBasedPrimitiveProps,
    Omit<
      ComponentPropsWithoutRef<"svg">,
      "direction" | "color" | "orientation" | "scale"
    > {
  dimensions: dimensions.Dimensions;
}

const BASE_SCALE = 0.8;

const InternalSVG = ({
  dimensions: dims,
  orientation = "left",
  children,
  className,
  color,
  style = {},
  scale = 1,
  ...props
}: InternalSVGProps): ReactElement => {
  const dir = direction.construct(orientation);
  dims = dir === "y" ? dimensions.swap(dims) : dims;
  const colorStr = Color.cssString(color);
  const theme = Theming.use();
  if (color != null) {
    // @ts-expect-error - css variables
    style[CSS.var("symbol-color")] = new Color.Color(color).rgbString;
    // @ts-expect-error - css variables
    style[CSS.var("symbol-color-contrast")] = new Color.Color(color).pickByContrast(
      theme.colors.gray.l0,
      theme.colors.gray.l10,
    ).rgbString;
  }
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox={dimensions.svgViewBox(dims)}
      className={CSS(CSS.loc(orientation), className)}
      fill={colorStr}
      stroke={colorStr}
      {...props}
      style={{
        aspectRatio: `${dims.width} / ${dims.height}`,
        width: dimensions.scale(dims, scale * BASE_SCALE).width,
        ...style,
      }}
    >
      <g>{children}</g>
    </svg>
  );
};

export interface FourWayValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const FourWayValve = ({
  className,
  orientation = "left",
  scale,
  color,
  ...props
}: FourWayValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("four-way-valve"), className)}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation="left" left={2.2989} top={50} id="1" />
      <Handle location="right" orientation="left" left={97.7011} top={50} id="2" />
      <Handle location="top" orientation="left" left={50} top={2.2989} id="3" />
      <Handle location="bottom" orientation="left" left={50} top={97.7011} id="4" />
    </HandleBoundary>
    <InternalSVG dimensions={{ width: 87, height: 87 }} color={color} scale={scale}>
      <Path d="M43.5 43.5L6.35453 24.7035C4.35901 23.6937 2 25.1438 2 27.3803V59.6197C2 61.8562 4.35901 63.3063 6.35453 62.2965L43.5 43.5ZM43.5 43.5L80.6455 24.7035C82.641 23.6937 85 25.1438 85 27.3803V59.6197C85 61.8562 82.641 63.3063 80.6455 62.2965L43.5 43.5Z" />
      <Path d="M43.5 43.5L24.7035 80.6455C23.6937 82.641 25.1438 85 27.3803 85H59.6197C61.8562 85 63.3063 82.641 62.2965 80.6455L43.5 43.5ZM43.5 43.5L24.7035 6.35453C23.6937 4.35901 25.1438 2 27.3803 2H59.6197C61.8562 2 63.3063 4.35901 62.2965 6.35453L43.5 43.5Z" />
    </InternalSVG>
  </Toggle>
);

export interface ThreeWayValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const ThreeWayValve = ({
  color,
  orientation = "left",
  scale,
  ...props
}: ThreeWayValveProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("three-way-valve"))}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={97.0278}
        id="1"
      />
      <Handle
        location="left"
        orientation={orientation}
        left={2.2989}
        top={33.1308}
        id="2"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={33.1308}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M43.5 21L6.35453 2.20349C4.35901 1.19372 2 2.64384 2 4.88029V37.1197C2 39.3562 4.35901 40.8063 6.35453 39.7965L43.5 21ZM43.5 21L80.6455 2.20349C82.641 1.19372 85 2.64384 85 4.8803V37.1197C85 39.3562 82.641 40.8063 80.6455 39.7965L43.5 21Z" />
      <Path d="M44.3923 22.3611C44.0222 21.6298 42.9778 21.6298 42.6077 22.3611L24.7035 57.7433C23.6937 59.7388 25.1438 62.0978 27.3803 62.0978L59.6197 62.0978C61.8562 62.0978 63.3063 59.7388 62.2965 57.7433L44.3923 22.3611Z" />
    </InternalSVG>
  </Toggle>
);

export interface ValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const Valve = ({
  orientation = "left",
  color,
  scale,
  ...props
}: ValveProps): ReactElement => (
  <Toggle {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2.2989} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7701}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M43.5 21L6.35453 2.20349C4.35901 1.19372 2 2.64384 2 4.88029V37.1197C2 39.3562 4.35901 40.8063 6.35453 39.7965L43.5 21ZM43.5 21L80.6455 2.20349C82.641 1.19372 85 2.64384 85 4.8803V37.1197C85 39.3562 82.641 40.8063 80.6455 39.7965L43.5 21Z" />
    </InternalSVG>
  </Toggle>
);

export interface SolenoidValveProps extends ToggleProps, SVGBasedPrimitiveProps {
  normallyOpen?: boolean;
}

export const SolenoidValve = ({
  className,
  color,
  orientation = "left",
  normallyOpen = false,
  scale,
  ...props
}: SolenoidValveProps): ReactElement => (
  <Toggle
    className={CSS(
      CSS.B("solenoid-valve"),
      normallyOpen && CSS.M("normally-open"),
      className,
    )}
    {...props}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={2.2989}
        top={69.5652}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={69.5652}
        id="2"
      />
      <Handle
        location="left"
        orientation={orientation}
        left={33.3333}
        top={17.7778}
        id="3"
      />
      <Handle location="top" orientation={orientation} left={50} top={2.8986} id="4" />
      <Handle
        location="right"
        orientation={orientation}
        left={66.6667}
        top={17.7778}
        id="5"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        className={CSS.B("body")}
        d="M43.5 48L6.35453 29.2035C4.35901 28.1937 2 29.6438 2 31.8803V64.1197C2 66.3562 4.35901 67.8063 6.35453 66.7965L43.5 48ZM43.5 48L80.6455 29.2035C82.641 28.1937 85 29.6438 85 31.8803V64.1197C85 66.3562 82.641 67.8063 80.6455 66.7965L43.5 48Z"
      />
      <Line x1={43.5} x2={43.5} y1={24.5333} y2={48} />
      <Rect x="29" y="2" width="29" height="22.5333" rx="1" />
    </InternalSVG>
  </Toggle>
);

export interface ReliefValveProps extends ToggleProps, SVGBasedPrimitiveProps {
  on: boolean;
}

export const ReliefValve = ({
  className,
  orientation = "left",
  color,
  scale,
  enabled = false,
  on = true,
  ...props
}: ReliefValveProps): ReactElement => {
  const oColor = Color.cssString(color);
  return (
    <Toggle
      className={CSS(CSS.B("relief-valve"), className)}
      enabled={enabled}
      {...props}
    >
      <HandleBoundary orientation={orientation}>
        <Handle location="top" orientation={orientation} left={20} top={12} id="1" />
        <Handle location="top" orientation={orientation} left={80} top={12} id="2" />
        <Handle location="top" orientation={orientation} left={50} top={3} id="3" />
      </HandleBoundary>
      <InternalSVG
        dimensions={{ width: 176, height: 175 }}
        orientation={orientation}
        scale={scale}
      >
        <Path
          d="M175.41 87.75C175.41 110.885 166.22 133.072 149.861 149.431C133.502 165.79 111.315 174.98 88.18 174.98C65.0452 174.98 42.8579 165.79 26.4991 149.431C10.1403 133.072 0.950012 110.885 0.950012 87.75C0.950012 64.6152 10.1403 42.4279 26.4991 26.0691C42.8579 9.71032 65.0452 0.52002 88.18 0.52002C111.315 0.52002 133.502 9.71032 149.861 26.0691C166.22 42.4279 175.41 64.6152 175.41 87.75ZM170.86 87.76C170.86 65.8346 162.15 44.8071 146.647 29.3035C131.143 13.7999 110.115 5.09006 88.19 5.09006C66.2646 5.09006 45.2371 13.7999 29.7335 29.3035C14.2299 44.8071 5.51999 65.8346 5.51999 87.76C5.51999 109.685 14.2299 130.713 29.7335 146.217C45.2371 161.72 66.2646 170.43 88.19 170.43C110.115 170.43 131.143 161.72 146.647 146.217C162.15 130.713 170.86 109.685 170.86 87.76Z"
          fill={oColor}
        />
        <Path
          d="M167.559 87.7501C167.559 108.803 159.196 128.993 144.31 143.88C129.423 158.766 109.233 167.129 88.18 167.129C67.1273 167.129 46.9369 158.766 32.0504 143.88C17.1639 128.993 8.80072 108.803 8.80072 87.7501C8.80072 66.6974 17.1639 46.5069 32.0504 31.6204C46.9369 16.7339 67.1273 8.37076 88.18 8.37076C109.233 8.37076 129.423 16.7339 144.31 31.6204C159.196 46.5069 167.559 66.6974 167.559 87.7501ZM163.419 87.7592C163.419 67.807 155.493 48.672 141.385 34.5637C127.276 20.4554 108.141 12.5295 88.1891 12.5295C68.237 12.5295 49.102 20.4554 34.9937 34.5637C20.8854 48.672 12.9594 67.807 12.9594 87.7592C12.9594 107.711 20.8854 126.846 34.9937 140.955C49.102 155.063 68.237 162.989 88.1891 162.989C108.141 162.989 127.276 155.063 141.385 140.955C155.493 126.846 163.419 107.711 163.419 87.7592Z"
          fill={oColor}
        />
        <Path
          className={CSS(CSS.B("relief-valve-path"), on && CSS.M("rotating"))}
          d="M112.45 79.7701L115.01 75.19C115.041 75.1344 115.055 75.0712 115.052 75.0078C115.048 74.9443 115.027 74.8831 114.991 74.831C114.954 74.779 114.904 74.7382 114.846 74.7132C114.787 74.6883 114.723 74.6803 114.66 74.69L110.84 75.26C110.773 75.2698 110.71 75.2949 110.654 75.3332C110.598 75.3716 110.552 75.4222 110.52 75.4812C110.487 75.5402 110.468 75.6059 110.464 75.6733C110.461 75.7408 110.473 75.8081 110.5 75.87L111.98 79.48C112.027 79.58 112.1 79.65 112.2 79.69C112.293 79.7234 112.377 79.7501 112.45 79.7701C112.57 80.9834 112.773 82.2134 113.06 83.4601C113.407 84.9534 113.573 86.1734 113.56 87.12C113.433 94.8 110.787 101.043 105.62 105.85C98.05 112.89 87.54 114.72 78.17 110.48C61.66 103.03 58.34 80.1901 72.64 68.5201C84.71 58.6801 101.98 61.9901 110.08 75.1501C110.093 75.1724 110.113 75.1906 110.136 75.2025C110.159 75.2144 110.185 75.2196 110.211 75.2176C110.237 75.2155 110.262 75.2062 110.283 75.1907C110.304 75.1753 110.32 75.1542 110.33 75.13L111.82 71.4601C111.87 71.3402 111.88 71.2077 111.847 71.0823C111.815 70.9569 111.742 70.8454 111.64 70.7644C111.537 70.6834 111.411 70.6372 111.279 70.6329C111.148 70.6285 111.018 70.6661 110.91 70.74C109.93 71.42 109.173 71.6601 108.64 71.4601C108.28 71.3267 108.127 71.07 108.18 70.69L108.83 66.32C108.917 65.7334 108.717 65.6067 108.23 65.94L105.2 67.98C105.11 68.0418 105.005 68.0779 104.897 68.0846C104.788 68.0912 104.679 68.0681 104.583 68.0177C104.486 67.9674 104.405 67.8917 104.348 67.7987C104.291 67.7057 104.261 67.599 104.26 67.49V62.42C104.261 62.319 104.232 62.2204 104.176 62.1366C104.12 62.0527 104.04 61.9875 103.946 61.949C103.852 61.9104 103.748 61.9004 103.647 61.9202C103.546 61.94 103.453 61.9886 103.38 62.06L100.61 64.8301C100.531 64.9092 100.432 64.9639 100.323 64.9877C100.214 65.0115 100.1 65.0034 99.9956 64.9644C99.8912 64.9253 99.8002 64.857 99.7335 64.7676C99.6669 64.6781 99.6275 64.5713 99.62 64.4601C99.52 62.9801 99.12 61.5434 98.42 60.1501C98.3746 60.0564 98.3043 59.9769 98.2169 59.9203C98.1294 59.8637 98.0282 59.8322 97.9241 59.8291C97.82 59.826 97.717 59.8515 97.6264 59.9027C97.5358 59.954 97.4609 60.0292 97.41 60.12L96.07 62.49C95.9954 62.6211 95.8863 62.7295 95.7548 62.8033C95.6232 62.877 95.4742 62.9134 95.3243 62.9082C95.1743 62.903 95.0292 62.8566 94.905 62.774C94.7807 62.6914 94.6821 62.5758 94.62 62.44L93.22 59.5201C93.1901 59.4566 93.1423 59.4033 93.0825 59.3666C93.0227 59.33 92.9536 59.3115 92.8835 59.3136C92.8134 59.3158 92.7454 59.3384 92.6879 59.3786C92.6305 59.4188 92.586 59.4749 92.56 59.54L91.81 61.37C91.3433 62.53 90.8033 62.5633 90.19 61.47C89.6767 60.5433 88.7867 59.4667 87.52 58.24C87.4711 58.1937 87.4105 58.1615 87.3447 58.1471C87.2789 58.1326 87.2105 58.1364 87.1467 58.1581C87.0829 58.1797 87.0262 58.2182 86.9827 58.2697C86.9392 58.3212 86.9106 58.3835 86.9 58.4501L86.41 61.79C86.3902 61.9126 86.3371 62.0276 86.2566 62.1222C86.176 62.2168 86.0713 62.2873 85.954 62.3257C85.8367 62.3641 85.7116 62.3689 85.5925 62.3396C85.4735 62.3104 85.3653 62.2482 85.28 62.16L82.33 59.2101C82.2703 59.1504 82.1948 59.1091 82.1123 59.0912C82.0299 59.0733 81.944 59.0795 81.865 59.109C81.786 59.1385 81.7171 59.1901 81.6665 59.2577C81.616 59.3252 81.586 59.4059 81.58 59.49L81.33 62.54C81.3233 62.6278 81.2944 62.7126 81.2461 62.7862C81.1977 62.8598 81.1314 62.9199 81.0534 62.9609C80.9755 63.0018 80.8884 63.0223 80.8003 63.0204C80.7123 63.0185 80.6261 62.9943 80.55 62.9501L76.61 60.73C76.1967 60.4967 76.0233 60.6167 76.09 61.0901L76.55 64.18C76.572 64.3256 76.5548 64.4743 76.5004 64.6111C76.4459 64.7478 76.3561 64.8676 76.2401 64.9582C76.124 65.0487 75.986 65.1068 75.8402 65.1264C75.6943 65.1461 75.5459 65.1267 75.41 65.07L71.82 63.62C71.7181 63.5804 71.6067 63.5721 71.5001 63.5961C71.3935 63.6201 71.2964 63.6753 71.2213 63.7547C71.1461 63.8341 71.0964 63.9342 71.0784 64.042C71.0603 64.1498 71.0748 64.2605 71.12 64.36L72.32 66.9001C72.376 67.0182 72.3988 67.1493 72.3859 67.2795C72.373 67.4096 72.3249 67.5337 72.2467 67.6386C72.1686 67.7434 72.0634 67.825 71.9424 67.8746C71.8214 67.9242 71.6892 67.9399 71.56 67.92L67.23 67.2801C67.1319 67.2649 67.0316 67.2787 66.9412 67.3198C66.8508 67.3609 66.7744 67.4275 66.7214 67.5113C66.6683 67.5952 66.6408 67.6927 66.6424 67.792C66.6439 67.8912 66.6744 67.9879 66.73 68.07L68.25 70.31C69.0167 71.45 68.7167 71.9633 67.35 71.85L64.39 71.6C64.2341 71.5835 64.0771 71.6197 63.9443 71.703C63.8114 71.7863 63.7104 71.9118 63.6573 72.0594C63.6043 72.2069 63.6023 72.3681 63.6518 72.5169C63.7012 72.6657 63.7992 72.7936 63.93 72.88C64.9233 73.5534 65.5334 74.28 65.76 75.06C65.84 75.3334 65.7433 75.5101 65.47 75.5901L60.78 76.8901C60.48 76.9701 60.4467 77.1134 60.68 77.32C61.62 78.14 62.3733 78.7167 62.94 79.05C64.4333 79.9367 64.3434 80.5667 62.67 80.94C61.8034 81.1267 60.72 81.7034 59.42 82.67C59.08 82.9167 59.1033 83.1201 59.49 83.2801L61.84 84.23C63.3333 84.8367 63.3333 85.4334 61.84 86.0201C60.8 86.4334 59.8167 87.2634 58.89 88.51C58.61 88.89 58.7034 89.1134 59.17 89.18L62.24 89.6401C62.3605 89.6564 62.4743 89.7052 62.5692 89.7812C62.6641 89.8573 62.7364 89.9577 62.7786 90.0718C62.8207 90.1859 62.831 90.3093 62.8084 90.4287C62.7857 90.5482 62.731 90.6593 62.65 90.75L59.29 94.54C59.0033 94.86 59.0767 95.0367 59.51 95.07L63.28 95.3901C63.3838 95.3986 63.4843 95.4325 63.5719 95.4886C63.6596 95.5447 63.7317 95.6211 63.7816 95.7109C63.8314 95.8006 63.8574 95.9008 63.8572 96.002C63.8569 96.1032 63.8303 96.2023 63.78 96.29L61.62 100.12C61.3733 100.553 61.4967 100.733 61.99 100.66L65.62 100.11C65.6841 100.1 65.7497 100.105 65.8114 100.125C65.8731 100.145 65.9293 100.179 65.9751 100.225C66.021 100.271 66.0554 100.327 66.0753 100.389C66.0953 100.45 66.1003 100.516 66.09 100.58C65.9433 101.687 65.7233 102.473 65.43 102.94C64.45 104.547 64.8233 105 66.55 104.3C66.6233 104.273 67.0067 104.057 67.7 103.65C67.8009 103.59 67.9167 103.56 68.034 103.564C68.1512 103.568 68.2652 103.606 68.3625 103.673C68.4599 103.74 68.5367 103.834 68.584 103.943C68.6314 104.052 68.6473 104.172 68.63 104.29L67.95 108.89C67.9034 109.243 68.0533 109.387 68.4 109.32C68.9133 109.22 69.86 108.647 71.24 107.6C71.84 107.147 72.1733 107.293 72.24 108.04L72.67 113.17C72.6765 113.248 72.6616 113.326 72.627 113.396C72.5923 113.466 72.5392 113.526 72.4734 113.568C72.4076 113.61 72.3316 113.633 72.2534 113.635C72.1753 113.638 72.0981 113.618 72.03 113.58L71.61 113.34C71.4459 113.247 71.3118 113.109 71.2232 112.941C71.1347 112.772 71.0954 112.581 71.11 112.39L71.29 110.19C71.33 109.73 71.1534 109.623 70.76 109.87C65.16 113.43 60.71 116.35 58.6 122.37C56.59 128.13 54.58 132.75 49.74 136.08C44.27 139.85 37.39 138.51 33.93 132.7C33.3567 131.74 33.5934 131.463 34.64 131.87C42.29 134.9 50.63 132.9 53.42 124.87C56.04 117.32 59.23 114.62 66.5 110.51C66.6416 110.429 66.7492 110.3 66.8026 110.147C66.856 109.995 66.8515 109.828 66.79 109.68C66.3367 108.553 66.4634 107.557 67.17 106.69C67.53 106.243 67.43 106.077 66.87 106.19C62.13 107.15 58.1633 109.19 54.97 112.31C52.53 114.68 50.75 118.28 48.54 121.29C45.04 126.06 38.86 129.57 33.16 127.86C29.7933 126.853 27.52 124.817 26.34 121.75C25.6867 120.05 26.12 119.7 27.64 120.7C32.41 123.84 40.08 124.39 44.43 120.21C44.61 120.037 45.83 118.263 48.09 114.89C52.04 108.99 56.65 107.97 62.87 105.31C63.1833 105.177 63.3833 104.947 63.47 104.62C63.69 103.813 63.97 103.227 64.31 102.86C64.73 102.413 64.6333 102.207 64.02 102.24C60.32 102.44 56.8333 103.337 53.56 104.93C49.82 106.75 47.69 109.67 43.73 113.95C42.31 115.49 40.12 116.87 37.16 118.09C30.55 120.83 22.6 117.85 21.43 110.48C21.2167 109.153 21.6167 108.933 22.63 109.82C27.9 114.42 34.71 115.87 40.87 111.43C40.8967 111.417 41.9267 110.25 43.96 107.93C48.2 103.09 53.73 101.96 59.79 101.05C59.9359 101.027 60.0688 100.953 60.1657 100.841C60.2626 100.73 60.3172 100.588 60.32 100.44C60.3267 99.56 60.8167 98.5933 61.79 97.54C62.09 97.22 62.02 97.0334 61.58 96.98C57.7067 96.54 53.9267 96.7767 50.24 97.69C46.89 98.53 43.92 101.3 38.81 104.82C37.57 105.673 35.5933 106.427 32.88 107.08C25.66 108.82 17.9 104.52 18.32 96.61C18.4 95.0967 18.8633 94.97 19.71 96.23C23.96 102.56 32.86 105.24 39.02 100C44.81 95.08 49.67 94.7 57.92 95.1C58.2267 95.12 58.3934 94.9733 58.42 94.66L58.52 93.37C58.5533 93.0367 58.7067 92.7767 58.98 92.5901L60.37 91.6501C60.7567 91.3901 60.7267 91.1967 60.28 91.07C54.73 89.47 49.09 88.4301 43.73 90.7801C37.79 93.3901 34.44 95.2 28.28 94.75C21.59 94.27 16.14 88.32 17.95 81.61C18.3367 80.17 18.8233 80.1334 19.41 81.5C21.67 86.78 26.84 91.05 32.89 90.68C35.43 90.52 37.57 89.29 40.4 87.99C44.26 86.21 48.39 86.47 52.81 87.43C55.03 87.9167 56.3733 88.2534 56.84 88.44C57.0667 88.5334 57.25 88.4801 57.39 88.2801C58.09 87.2067 59.02 86.3133 60.18 85.6C60.4 85.4667 60.3933 85.3467 60.16 85.24C56.0133 83.34 52.8867 82.15 50.78 81.67C45.96 80.58 40.46 82.79 36.28 83.3C30.71 83.98 24.7 82.64 21.46 77.94C19.42 74.97 18.66 70.09 21.03 67C21.0869 66.9238 21.1651 66.8662 21.2548 66.8345C21.3445 66.8028 21.4415 66.7985 21.5337 66.8221C21.6258 66.8456 21.7089 66.896 21.7723 66.9669C21.8358 67.0378 21.8767 67.1258 21.89 67.22C23.43 76.27 31.27 81.74 40.34 78.55C45.49 76.74 51.51 79.31 57.56 82.05C57.8933 82.2034 58.1467 82.1167 58.32 81.79C58.7667 80.9633 59.7733 80.5167 61.34 80.4501C61.68 80.4367 61.7167 80.3234 61.45 80.11C57.1367 76.63 53.6 74.4967 50.84 73.7101C48.84 73.1367 45.5133 72.9701 40.86 73.2101C37.06 73.3967 33.5233 72.6067 30.25 70.8401C24.35 67.6501 21.49 60.15 25.92 54.57C26.7667 53.5034 27.2034 53.6534 27.23 55.0201C27.33 60.8501 30.3 66.46 35.76 68.67C40.46 70.57 45.23 68.15 50.29 70.47C53.4967 71.9433 56.41 73.7867 59.03 76C59.1348 76.0891 59.2706 76.1431 59.4213 76.1555C59.572 76.1679 59.7312 76.1382 59.88 76.07C59.96 76.0367 60.0433 75.9633 60.13 75.85C60.3567 75.55 60.6533 75.3734 61.02 75.32L63.07 75.01C63.35 74.97 63.4034 74.8367 63.23 74.61C59.34 69.56 55.36 66.1401 49.19 64.8401C43.64 63.6701 39.75 63.32 35.42 60.06C30.88 56.64 28.91 50.88 31.47 45.74C32.2167 44.24 33.0767 43.1834 34.05 42.57C34.99 41.97 35.33 42.2134 35.07 43.3C33.59 49.39 36.08 56.24 41.84 59.16C44.23 60.36 47.73 60.44 50.25 61.12C54.83 62.36 59.17 66.93 62.12 70.47C62.3267 70.7167 62.5834 70.79 62.89 70.69C63.5034 70.4767 64.4633 70.4467 65.77 70.6C66.1033 70.64 66.1933 70.5101 66.04 70.2101C63.03 64.3501 59.67 60.36 53.73 58.01C48.5 55.93 43.82 54.36 40.2 49.32C36.43 44.09 37.25 36.03 43.66 33.26C44 33.1067 44.1633 33.2167 44.15 33.5901C44.08 35.0901 42.82 37.62 42.77 39.49C42.5767 46.75 45.9733 51.4333 52.96 53.54C59.3 55.44 62.5 60.5401 65.73 66.0201C65.7666 66.0834 65.8157 66.1387 65.8745 66.1827C65.9332 66.2267 66.0004 66.2584 66.0722 66.2761C66.1439 66.2938 66.2187 66.2971 66.2921 66.2857C66.3656 66.2744 66.4363 66.2487 66.5 66.2101C67.3333 65.7034 68.14 65.74 68.92 66.32C69.6934 66.8867 69.9833 66.7 69.79 65.76C68.87 61.34 66.74 57.4067 63.4 53.9601C62.8467 53.3934 60.87 52.01 57.47 49.81C51.2 45.75 44.67 38.28 49.08 30.3C50.4733 27.7867 52.4233 26.1734 54.93 25.4601C55.9767 25.1667 56.2134 25.4801 55.64 26.4001C51.94 32.3101 51.53 38.54 56.47 44.35C56.4767 44.3633 58.22 45.5434 61.7 47.8901C65.24 50.2834 67.7233 53.7667 69.15 58.3401C69.41 59.1667 69.9133 60.3234 70.66 61.81C70.8133 62.1167 71.06 62.2934 71.4 62.3401C72.4667 62.4801 73.3733 62.8167 74.12 63.35C74.4467 63.5833 74.5933 63.5 74.56 63.1C73.9 56.15 72.14 50.88 66.92 46.12C64.28 43.7134 62.3367 41.5967 61.09 39.7701C56.31 32.7101 57.4 21.3701 67.65 20.2001C68.7567 20.0734 68.9133 20.4067 68.12 21.2001C63.43 25.8501 61.51 32.7101 65.08 38.5801C66.26 40.5201 68.22 41.91 69.83 43.43C74.05 47.41 74.81 53.36 75.79 58.82C75.8633 59.1934 76.0867 59.3967 76.46 59.43C77.4333 59.5034 78.2667 59.9234 78.96 60.69C79.3933 61.1634 79.64 61.08 79.7 60.44C80.1 55.91 80.26 50.65 78.04 46.44C75.62 41.83 70.6 37.1501 70.02 29.7701C69.49 22.9601 74.49 16.61 81.57 17.44C82.5167 17.5534 82.6 17.8834 81.82 18.43C76.82 21.97 73.48 27.55 74.97 33.79C75.83 37.41 79.44 40.0601 80.75 43.9601C82.25 48.4701 81.68 51.9901 81.75 56.7101C81.753 56.91 81.8103 57.1056 81.9159 57.2763C82.0215 57.4471 82.1715 57.5865 82.35 57.68C83.05 58.0534 83.7667 58.6867 84.5 59.5801C84.6933 59.8134 84.8434 59.7867 84.95 59.5C86.2767 55.9 86.8167 52.23 86.57 48.49C86.25 43.84 83.39 39.2501 82.06 35.3901C80.09 29.6201 80.96 22.4801 86.15 18.8401C88.69 17.0534 91.5433 16.5534 94.71 17.3401C95.8967 17.6401 95.9333 18.04 94.82 18.54C89.4 20.97 84.92 26.23 85.45 32.48C85.78 36.41 88.92 40.09 89.34 44.04C89.5733 46.2933 89.3233 49.13 88.59 52.55C88.25 54.1234 87.97 55.16 87.75 55.66C87.47 56.3 87.6233 56.8067 88.21 57.18C89.01 57.7 89.6467 58.37 90.12 59.19C90.44 59.7434 90.7267 59.7267 90.98 59.1401C93.14 54.0601 95.36 49.6501 94.45 44.8401C93.8834 41.8667 93.3133 38.6934 92.74 35.32C91.19 26.21 97.72 16.16 108.11 19.76C110.097 20.4534 110.057 20.9967 107.99 21.3901C100.57 22.8001 95.08 29.73 96.92 37.51C97.5734 40.2834 97.9033 41.6834 97.91 41.7101C98.53 47.1301 96.25 52.1401 93.79 57.2101C93.7158 57.3585 93.6876 57.5261 93.709 57.6916C93.7303 57.8571 93.8003 58.0131 93.91 58.1401C94.3967 58.7134 94.64 59.3667 94.64 60.1C94.6334 60.6867 94.8233 60.76 95.21 60.32C97.7367 57.4867 99.5833 54.2967 100.75 50.75C102.09 46.72 101.49 40.59 101.46 37.51C101.42 31.71 104.05 25.57 109.51 23.23C112.66 21.88 117.45 22.12 120.07 24.76C120.132 24.8243 120.174 24.9053 120.191 24.9932C120.208 25.0811 120.199 25.172 120.165 25.2547C120.131 25.3375 120.074 25.4086 120 25.4593C119.926 25.5099 119.839 25.538 119.75 25.54C113.67 25.67 107.42 29.03 105.6 35.13C105.273 36.23 105.163 37.8201 105.27 39.9001C105.47 43.9901 105.71 46.64 103.73 50.75C102.45 53.4034 100.783 55.9934 98.73 58.5201C98.5967 58.6867 98.6133 58.8367 98.78 58.97C99.7667 59.7567 100.293 60.8 100.36 62.1C100.364 62.1551 100.383 62.208 100.416 62.2524C100.448 62.2969 100.493 62.3311 100.545 62.3511C100.596 62.371 100.652 62.3758 100.706 62.365C100.76 62.3542 100.81 62.3282 100.85 62.29C103.537 59.5567 105.16 57.8667 105.72 57.22C110.04 52.25 110.03 46.6 111.22 41C112.86 33.26 120.18 25.56 128.79 29.66C130.317 30.38 131.463 31.3734 132.23 32.6401C132.266 32.7038 132.284 32.7767 132.279 32.85C132.275 32.9233 132.25 32.9938 132.207 33.0531C132.163 33.1123 132.104 33.1577 132.035 33.1838C131.966 33.2098 131.892 33.2155 131.82 33.2001C125.52 31.7701 118.18 34.1901 115.44 40.4501C115.3 40.7701 114.893 42.8634 114.22 46.73C113.2 52.61 109.38 57.0101 104.59 61.0301C104.27 61.3034 104.287 61.5567 104.64 61.79C104.92 61.9833 105.137 62.21 105.29 62.47C105.47 62.7767 105.543 63.1034 105.51 63.4501L105.38 65.01C105.333 65.5767 105.557 65.7167 106.05 65.43C109.557 63.3767 112.32 61.35 114.34 59.35C115.42 58.2767 116.383 56.7567 117.23 54.79C119.157 50.31 120.33 47.6234 120.75 46.73C123.88 40.01 131.08 34.76 138.38 38.38C140.353 39.3534 141.777 40.78 142.65 42.66C143.09 43.62 142.823 43.89 141.85 43.47C134.71 40.41 125.87 42.66 123.15 50.62C122.39 52.81 121.77 54.87 120.58 56.55C117.92 60.32 113.91 62.78 109.8 65.19C109.46 65.39 109.433 65.63 109.72 65.91C110.34 66.5033 110.327 67.38 109.68 68.54C109.153 69.4733 109.383 69.7367 110.37 69.3301C115.84 67.0901 120.53 65.66 123.8 60.57C125.86 57.3634 127.453 55.04 128.58 53.6C133.58 47.26 142.83 44.1501 148.72 50.8301C149.82 52.0834 150.477 53.5001 150.69 55.0801C150.697 55.1439 150.686 55.2087 150.658 55.2666C150.63 55.3246 150.586 55.3729 150.532 55.4059C150.478 55.4389 150.415 55.455 150.353 55.4522C150.29 55.4494 150.23 55.4278 150.18 55.3901C144.73 51.5701 137.38 50.73 132.31 55.31C129.99 57.42 128.68 61.2 126.54 63.24C122.42 67.14 118.66 68.2 113.97 69.91C113.69 70.01 113.493 70.1967 113.38 70.47L112.46 72.74C112.327 73.0734 112.44 73.22 112.8 73.18C117.373 72.7267 121.13 71.6467 124.07 69.94C127.67 67.85 130.32 64.08 133.1 61.36C134.92 59.5734 137.163 58.1667 139.83 57.1401C146.62 54.5201 154.47 57.86 155.3 65.57C155.4 66.49 155.12 66.6233 154.46 65.97C149.97 61.49 143.07 59.6801 137.39 62.9001C134.79 64.3701 133.3 67.3701 130.93 69.2701C128.023 71.6034 124.69 73.0834 120.93 73.7101C118.497 74.1101 117.13 74.3567 116.83 74.4501C116.517 74.5501 116.347 74.7634 116.32 75.0901C116.227 76.3101 115.867 77.1467 115.24 77.6C114.24 78.3267 114.357 78.6834 115.59 78.67C116.17 78.6567 118.157 78.5867 121.55 78.4601C126.56 78.2601 129.52 76.52 134.03 73.24C137.95 70.38 141.35 68.27 146.22 67.94C153.01 67.48 158.86 72.26 158.49 79.23C158.43 80.2967 158.09 80.3967 157.47 79.5301C153.86 74.5201 147.15 70.8801 141.16 73.2701C140.78 73.4234 139.003 74.6234 135.83 76.87C131.883 79.6634 127.19 80.8567 121.75 80.4501C120.237 80.3367 119.157 80.3267 118.51 80.42C118.15 80.4734 118.043 80.6667 118.19 81C118.55 81.86 118.07 82.6201 116.75 83.2801C115.797 83.7601 115.833 84.1534 116.86 84.4601C122.45 86.1301 127.81 86.76 133.44 84.37C139.1 81.96 142.1 80.26 147.84 80.57C155.09 80.96 159.87 86.15 158.88 93.67C158.64 95.4767 158.143 95.5501 157.39 93.8901C154.91 88.4701 149.58 84.0801 143.29 84.8401C142.47 84.9334 140.587 85.6401 137.64 86.9601C131.25 89.8101 126.56 88.5401 119.93 87.0901C119.59 87.0167 119.323 87.13 119.13 87.43C118.583 88.29 117.763 88.9467 116.67 89.4001C116.25 89.5734 116.237 89.7734 116.63 90C120.757 92.3867 124.697 93.67 128.45 93.85C131.79 94.01 134.73 93.17 139.49 92.23C146.48 90.84 155.33 93.58 156.88 101.38C157.293 103.453 157.093 105.507 156.28 107.54C155.6 109.247 155.06 109.2 154.66 107.4C153.41 101.7 148.55 96.12 142.53 95.81C139.09 95.63 134.4 97.84 130.68 97.41C127.7 97.0633 123.92 95.7034 119.34 93.3301C119.02 93.1701 118.737 93.2234 118.49 93.49C117.57 94.4967 116.727 94.9567 115.96 94.87C115.247 94.79 115.183 95.0133 115.77 95.54C119.05 98.52 122.337 100.507 125.63 101.5C133.14 103.76 139.55 100.49 146.95 104.88C152.85 108.37 154.92 115.86 150.46 121.21C149.82 121.977 149.507 121.863 149.52 120.87C149.59 114.81 146.34 108.5 140.34 106.53C136.93 105.41 132.56 106.7 129.24 105.87C124.48 104.67 121.44 102.03 117.43 99.3901C117.137 99.2034 116.853 99.22 116.58 99.44C115.787 100.08 114.867 100.36 113.82 100.28C113.739 100.276 113.659 100.295 113.59 100.336C113.52 100.376 113.463 100.436 113.426 100.507C113.389 100.579 113.374 100.66 113.381 100.74C113.389 100.82 113.42 100.897 113.47 100.96C117.04 105.42 121.38 109.29 127.21 110.45C131.637 111.337 134.65 112.033 136.25 112.54C144.65 115.23 150.71 126.01 142.74 132.79C141.747 133.637 141.38 133.42 141.64 132.14C142.83 126.27 140.97 119.87 135.7 116.69C132.57 114.79 128.27 115.21 125.18 113.83C121.913 112.377 119.207 110.337 117.06 107.71C115.753 106.117 114.787 105.097 114.16 104.65C113.873 104.45 113.573 104.43 113.26 104.59C112.613 104.917 111.92 104.96 111.18 104.72C110.633 104.547 110.493 104.717 110.76 105.23C113.473 110.537 116.477 114.123 119.77 115.99C120.843 116.597 123.483 117.707 127.69 119.32C131.39 120.733 134.337 122.927 136.53 125.9C140.17 130.83 139.44 139.23 133.19 142.23C133.107 142.27 133.014 142.285 132.923 142.273C132.832 142.262 132.746 142.224 132.675 142.165C132.604 142.106 132.552 142.028 132.525 141.94C132.497 141.853 132.496 141.759 132.52 141.67C132.95 140.16 133.75 138.13 133.85 136.35C134.297 128.663 130.777 123.797 123.29 121.75C117.83 120.26 114.17 115.01 111.2 109.56C111.013 109.227 110.733 109.107 110.36 109.2C109.313 109.46 108.26 109.357 107.2 108.89C106.76 108.703 106.6 108.84 106.72 109.3C108.35 115.71 111.2 120.26 116.7 123.96C122.07 127.57 127.02 130.42 128.5 136.82C129.847 142.64 127.82 146.95 122.42 149.75C120.667 150.663 120.31 150.28 121.35 148.6C124.61 143.34 124.96 136.19 120.63 131.54C120.297 131.18 118.587 129.98 115.5 127.94C109.86 124.22 108.61 119.63 106.2 113.59C106.073 113.263 105.833 113.093 105.48 113.08C104.44 113.053 103.563 112.757 102.85 112.19C102.377 111.817 102.177 111.93 102.25 112.53C103.07 119.17 104.28 124.29 109.36 128.82C113.16 132.21 116.38 135.59 117.85 140.61C119.82 147.31 116.22 154.63 108.88 155.18C108.267 155.227 108.157 155.013 108.55 154.54C113.81 148.24 116.06 140.05 109.32 134.13C105.72 130.97 103.27 128.14 102.22 123.53C101.727 121.363 101.327 119.137 101.02 116.85C101 116.686 100.932 116.532 100.826 116.406C100.719 116.28 100.578 116.187 100.42 116.14C98.8934 115.687 98.0167 115.25 97.79 114.83C97.3033 113.957 97.0134 114.017 96.92 115.01C96.6467 117.997 96.6867 121.06 97.04 124.2C97.56 128.79 102.16 134.04 104.07 137.19C105.123 138.937 105.9 141.037 106.4 143.49C107.9 150.9 103.72 158.33 95.63 157.97C94.1967 157.91 94.0667 157.467 95.24 156.64C98.0733 154.64 100.08 152.103 101.26 149.03C104.64 140.18 97.66 137.15 95.78 131.06C94.57 127.16 94.26 122.7 95 118.79C95.08 118.383 94.94 118.077 94.58 117.87C93.6667 117.35 92.9033 116.633 92.29 115.72C92.2472 115.66 92.188 115.614 92.1196 115.588C92.0512 115.561 91.9765 115.554 91.9045 115.569C91.8326 115.584 91.7665 115.619 91.7142 115.671C91.6619 115.723 91.6257 115.788 91.61 115.86C90.42 121.93 89.07 126.83 91.53 132.55C94.52 139.51 97.33 145.17 94.24 152.06C92.2 156.6 87.76 159.05 82.91 158.29C80.6633 157.943 80.58 157.31 82.66 156.39C88.95 153.62 93.43 146.11 90.27 139.46C86.66 131.88 86.57 127.75 89.1 119.36C89.2067 119.007 89.1 118.733 88.78 118.54C87.7 117.887 87 117.02 86.68 115.94C86.5333 115.46 86.33 115.433 86.07 115.86C82.4167 121.853 81.3667 128.187 82.92 134.86C84.07 139.79 84.76 144.19 83.03 148.76C80.68 154.96 74.19 158.35 67.99 155.4C66.9833 154.92 67.01 154.517 68.07 154.19C74.02 152.34 78.46 149.7 80.01 143.39C80.7 140.58 79.58 136.8 78.84 134C77.72 129.76 80.14 123.78 82.3 119.3C83.25 117.34 82.58 117.01 81.93 115.49C81.75 115.063 81.5133 115.027 81.22 115.38C78.6667 118.4 76.8633 121.587 75.81 124.94C74.57 128.94 75.27 132.96 75.32 137.27C75.41 143.8 72.27 151.06 65.48 152.67C62.5134 153.377 59.8267 152.927 57.42 151.32C55.8934 150.313 56.0433 149.777 57.87 149.71C63.76 149.52 69.07 146.21 71.03 140.35C72.15 136.97 70.82 132.39 71.53 128.84C72.25 125.253 74.2134 121.493 77.42 117.56C77.5334 117.427 77.5667 117.277 77.52 117.11L76.36 112.96C76.32 112.807 76.2433 112.783 76.13 112.89C71.75 117.05 68 120.78 67.03 126.26C66.1633 131.167 65.5434 134.307 65.17 135.68C63.6 141.39 58.81 146.93 52.47 146.81C49.5167 146.75 46.9933 145.677 44.9 143.59C44.0067 142.697 44.1867 142.28 45.44 142.34C46.55 142.39 48.18 142.64 49.51 142.52C56.7034 141.84 60.9134 138.237 62.14 131.71C62.9134 127.617 63.3267 125.51 63.38 125.39C64.9533 121.803 66.8433 119.017 69.05 117.03C73.09 113.39 75.4 111.3 75.98 110.76C76.059 110.685 76.1559 110.632 76.2614 110.606C76.3669 110.58 76.4773 110.582 76.582 110.611C76.6867 110.64 76.782 110.696 76.8588 110.773C76.9355 110.85 76.991 110.945 77.02 111.05L78.2 115.29C78.2202 115.367 78.2621 115.436 78.3209 115.489C78.3796 115.543 78.4526 115.578 78.531 115.591C78.6093 115.603 78.6897 115.593 78.7623 115.561C78.8349 115.529 78.8966 115.476 78.94 115.41L80.25 113.5C81.29 111.98 82.0167 112.15 82.43 114.01C82.55 114.543 82.9067 115.16 83.5 115.86C83.78 116.187 84 116.15 84.16 115.75L84.9 113.94C84.9589 113.791 85.0569 113.662 85.1838 113.565C85.3108 113.468 85.462 113.407 85.6215 113.388C85.781 113.37 85.943 113.395 86.0906 113.46C86.2381 113.525 86.3657 113.629 86.46 113.76L88.57 116.73C89.3167 117.777 89.73 117.66 89.81 116.38C89.8433 115.847 90.0567 114.973 90.45 113.76C90.4947 113.624 90.5771 113.504 90.6877 113.414C90.7982 113.324 90.9323 113.267 91.074 113.25C91.2158 113.233 91.3594 113.257 91.488 113.319C91.6166 113.381 91.7248 113.479 91.8 113.6C92.32 114.447 93.26 115.33 94.62 116.25C94.9267 116.457 95.0967 116.377 95.13 116.01L95.4 112.8C95.4055 112.715 95.4326 112.633 95.4788 112.561C95.5249 112.49 95.5886 112.431 95.6637 112.391C95.7388 112.351 95.8229 112.331 95.908 112.332C95.9931 112.334 96.0764 112.357 96.15 112.4L100.41 114.8C100.449 114.823 100.494 114.835 100.539 114.833C100.584 114.832 100.628 114.818 100.666 114.793C100.703 114.768 100.733 114.733 100.751 114.692C100.77 114.65 100.776 114.605 100.77 114.56L100.19 110.76C100.175 110.666 100.186 110.569 100.222 110.48C100.257 110.391 100.316 110.314 100.392 110.255C100.468 110.196 100.559 110.158 100.655 110.145C100.752 110.132 100.85 110.144 100.94 110.18L104.98 111.82C105.367 111.973 105.503 111.85 105.39 111.45L104.46 108.12C104.436 108.031 104.434 107.936 104.456 107.846C104.477 107.756 104.52 107.673 104.582 107.603C104.643 107.534 104.721 107.481 104.808 107.449C104.895 107.417 104.988 107.407 105.08 107.42L109.77 108.11C109.833 108.118 109.897 108.108 109.955 108.081C110.013 108.054 110.062 108.012 110.096 107.959C110.129 107.906 110.147 107.845 110.146 107.783C110.145 107.721 110.126 107.661 110.09 107.61L108.11 104.69C108.037 104.583 107.995 104.458 107.988 104.329C107.981 104.2 108.009 104.071 108.07 103.957C108.13 103.842 108.221 103.747 108.332 103.681C108.443 103.614 108.571 103.579 108.7 103.58H112.5C112.967 103.58 113.103 103.367 112.91 102.94C112.657 102.38 112.253 101.923 111.7 101.57C110.373 100.723 110.467 100.09 111.98 99.67L115.54 98.68C115.619 98.6572 115.69 98.6133 115.745 98.5531C115.801 98.4929 115.839 98.4186 115.855 98.3383C115.872 98.258 115.866 98.1748 115.839 98.0976C115.811 98.0203 115.763 97.952 115.7 97.9001L113.13 95.93C113.044 95.8639 112.977 95.7768 112.935 95.6772C112.893 95.5776 112.877 95.4688 112.889 95.3613C112.901 95.2538 112.941 95.1512 113.004 95.0634C113.067 94.9756 113.152 94.9056 113.25 94.86L116.93 93.1C117.004 93.0637 117.067 93.008 117.112 92.939C117.157 92.87 117.183 92.7903 117.186 92.7088C117.189 92.6272 117.169 92.5469 117.13 92.4765C117.09 92.4062 117.031 92.3486 116.96 92.31L113.94 90.6C113.883 90.5677 113.836 90.5217 113.802 90.4663C113.767 90.4109 113.748 90.348 113.745 90.2837C113.742 90.2194 113.755 90.1558 113.784 90.0992C113.813 90.0425 113.857 89.9946 113.91 89.9601L117.61 87.4501C117.68 87.4039 117.736 87.3395 117.772 87.2639C117.808 87.1883 117.823 87.1043 117.814 87.0209C117.806 86.9376 117.775 86.858 117.725 86.7909C117.675 86.7238 117.608 86.6716 117.53 86.6401L114.01 85.2101C113.952 85.1859 113.901 85.1482 113.861 85.1003C113.821 85.0524 113.794 84.9958 113.781 84.9355C113.768 84.8751 113.77 84.8129 113.788 84.7544C113.805 84.6959 113.837 84.6429 113.88 84.6L117.47 81.01C117.77 80.7167 117.713 80.54 117.3 80.48L112.45 79.7701ZM110.36 87.74C110.36 84.872 109.795 82.032 108.698 79.3822C107.6 76.7325 105.991 74.3249 103.963 72.2969C101.935 70.2688 99.5276 68.6601 96.8778 67.5625C94.2281 66.465 91.3881 65.9001 88.52 65.9001C85.6519 65.9001 82.812 66.465 80.1622 67.5625C77.5125 68.6601 75.1048 70.2688 73.0768 72.2969C71.0488 74.3249 69.44 76.7325 68.3425 79.3822C67.2449 82.032 66.68 84.872 66.68 87.74C66.68 93.5324 68.981 99.0875 73.0768 103.183C77.1726 107.279 82.7277 109.58 88.52 109.58C94.3123 109.58 99.8674 107.279 103.963 103.183C108.059 99.0875 110.36 93.5324 110.36 87.74Z"
          fill={oColor}
          style={{
            transformOrigin: "center",
            transformBox: "fill-box",
          }}
        />
        <Path
          d="M110.36 87.74C110.36 93.5324 108.059 99.0875 103.963 103.183C99.8674 107.279 94.3123 109.58 88.52 109.58C82.7277 109.58 77.1726 107.279 73.0768 103.183C68.981 99.0875 66.68 93.5324 66.68 87.74C66.68 84.872 67.2449 82.032 68.3425 79.3822C69.44 76.7325 71.0488 74.3249 73.0768 72.2969C75.1048 70.2688 77.5125 68.6601 80.1622 67.5625C82.812 66.465 85.6519 65.9001 88.52 65.9001C91.3881 65.9001 94.2281 66.465 96.8778 67.5625C99.5276 68.6601 101.935 70.2688 103.963 72.2969C105.991 74.3249 107.6 76.7325 108.698 79.3822C109.795 82.032 110.36 84.872 110.36 87.74ZM105.94 87.7701C105.94 83.15 104.105 78.7191 100.838 75.4522C97.5709 72.1854 93.1401 70.35 88.52 70.35C83.8999 70.35 79.4691 72.1854 76.2022 75.4522C72.9353 78.7191 71.1 83.15 71.1 87.7701C71.1 90.0577 71.5506 92.3229 72.426 94.4364C73.3015 96.5499 74.5846 98.4703 76.2022 100.088C77.8198 101.705 79.7402 102.989 81.8537 103.864C83.9672 104.739 86.2324 105.19 88.52 105.19C90.8076 105.19 93.0728 104.739 95.1863 103.864C97.2998 102.989 99.2202 101.705 100.838 100.088C102.455 98.4703 103.739 96.5499 104.614 94.4364C105.489 92.3229 105.94 90.0577 105.94 87.7701Z"
          fill={oColor}
        />
      </InternalSVG>
    </Toggle>
  );
};

export interface CheckValveProps extends DivProps, SVGBasedPrimitiveProps {}

export const CheckValve = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: CheckValveProps): ReactElement => (
  <Div
    orientation={orientation}
    className={CSS(CSS.B("check-valve"), className)}
    {...props}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={4.2222}
        top={48.8372}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={94.2038}
        top={48.8372}
        id="2"
      />
    </HandleBoundary>
    <img src={st} width={5460 / 4} height={2116 / 4} />
  </Div>
);

export interface ISOCheckValveProps extends DivProps, SVGBasedPrimitiveProps {}

export const ISOCheckValve = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: ISOCheckValveProps): ReactElement => {
  const colorStr = Color.cssString(color);
  return (
    <Div {...props} orientation={orientation}>
      <HandleBoundary orientation={orientation}>
        <Handle
          location="left"
          orientation={orientation}
          left={8.3333}
          top={50}
          id="1"
        />
        <Handle
          location="right"
          orientation={orientation}
          left={96.4286}
          top={50}
          id="2"
        />
      </HandleBoundary>
      <InternalSVG
        dimensions={{ width: 84, height: 42 }}
        color={color}
        orientation={orientation}
        scale={scale}
      >
        <Circle cx="7" cy="7" r="4" fill={colorStr} />
        <Path
          d="M7 39.5V11.5941C7 9.42886 9.22384 7.97669 11.2063 8.84738L76.7937 37.6526C78.7762 38.5233 81 37.0711 81 34.9059V6"
          strokeLinecap="round"
        />
      </InternalSVG>
    </Div>
  );
};

export interface AngledValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const AngledValve = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: AngledValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("angled-valve"), className)}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="bottom"
        orientation={orientation}
        left={32.8125}
        top={97.0278}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.0278}
        top={32.8125}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M22.3611 20.1077C21.6298 20.4778 21.6298 21.5222 22.3611 21.8923L57.7433 39.7965C59.7388 40.8063 62.0978 39.3562 62.0978 37.1197L62.0978 4.88029C62.0978 2.64384 59.7388 1.19372 57.7433 2.2035L22.3611 20.1077Z" />
      <Path d="M21.8923 22.3611C21.5222 21.6298 20.4778 21.6298 20.1077 22.3611L2.20349 57.7433C1.19372 59.7388 2.64384 62.0978 4.8803 62.0978L37.1197 62.0978C39.3562 62.0978 40.8063 59.7388 39.7965 57.7433L21.8923 22.3611Z" />
    </InternalSVG>
  </Toggle>
);

export interface BallValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const BallValve = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: BallValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("ball-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2.2989} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="43.5978" cy="20.972" r="19" />
      <Path d="M26.5 12.8472L6.35452 2.17563C4.35901 1.16585 2 2.61598 2 4.85243V37.0918C2 39.3283 4.35901 40.7784 6.35453 39.7686L26.5 29.3472" />
      <Path d="M60.5 28.8486L80.6455 39.5202C82.641 40.5299 85 39.0798 85 36.8434V4.60396C85 2.36751 82.641 0.917381 80.6455 1.92716L60.5 12.3486" />
    </InternalSVG>
  </Toggle>
);

export interface ThreeWayBallValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const ThreeWayBallValve = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: ThreeWayBallValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("three-way-ball-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="bottom" orientation={orientation} left={50} top={95.8} id="1" />
      <Handle
        location="left"
        orientation={orientation}
        left={2.2989}
        top={33.1308}
        id="2"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={33.1308}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="43.5978" cy="21.722" r="19" />
      <Path d="M26.5 13.5972L6.35452 2.92563C4.35901 1.91585 2 3.36598 2 5.60243V37.8418C2 40.0783 4.35901 41.5284 6.35453 40.5186L26.5 30.0972" />
      <Path d="M60.5 29.5986L80.6455 40.2702C82.641 41.2799 85 39.8298 85 37.5934V5.35396C85 3.11751 82.641 1.66738 80.6455 2.67716L60.5 13.0986" />
      <Path d="M35.3737 38.7499L24.7021 58.8954C23.6923 60.8909 25.1425 63.2499 27.3789 63.2499H59.6183C61.8548 63.2499 63.3049 60.8909 62.2951 58.8954L51.8737 38.7499" />
    </InternalSVG>
  </Toggle>
);

export interface GateValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const GateValve = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: GateValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("gate-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2.2989} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M43.5 21L6.35453 2.20349C4.35901 1.19372 2 2.64384 2 4.88029V37.1197C2 39.3562 4.35901 40.8063 6.35453 39.7965L43.5 21ZM43.5 21L80.6455 2.20349C82.641 1.19372 85 2.64384 85 4.8803V37.1197C85 39.3562 82.641 40.8063 80.6455 39.7965L43.5 21Z" />
      <Path d="M43.5 2 L43.5 39.7965" />
    </InternalSVG>
  </Toggle>
);

export interface ButterflyValveOneProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const ButterflyValveOne = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: ButterflyValveOneProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("butterfly-valve-one"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2.2989} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M43.5 21L6.35453 2.20349C4.35901 1.19372 2 2.64384 2 4.88029V37.1197C2 39.3562 4.35901 40.8063 6.35453 39.7965L43.5 21ZM43.5 21L80.6455 2.20349C82.641 1.19372 85 2.64384 85 4.8803V37.1197C85 39.3562 82.641 40.8063 80.6455 39.7965L43.5 21Z" />
      <Path d="M43.5 2V40" />
      <Circle cx="43.5" cy="21" r="10" fill={Color.cssString(color)} />
    </InternalSVG>
  </Toggle>
);

export interface ButterflyValveTwoProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const ButterflyValveTwo = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: ButterflyValveTwoProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("butterfly-valve-two"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2.2989} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="43.5" cy="21" r="10" fill={Color.cssString(color)} />
      <Rect x="2" y="2" width="83" height="38" rx="1" />
      <Path d="M2.29001 2.29004L84.7069 39.676" />
    </InternalSVG>
  </Toggle>
);

export interface BreatherValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const BreatherValve = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: BreatherValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("breather-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={8.081} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={91.919}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 99, height: 57 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="91" cy="49.5" r="6" fill={Color.cssString(color)} />
      <Circle cx="8" cy="7.5" r="6" fill={Color.cssString(color)} />
      <Path d="M49.5 28.5L12.3545 9.70349C10.359 8.69372 8 10.1438 8 12.3803V44.6197C8 46.8562 10.359 48.3063 12.3545 47.2965L49.5 28.5ZM49.5 28.5L86.6455 9.70349C88.641 8.69372 91 10.1438 91 12.3803V44.6197C91 46.8562 88.641 48.3063 86.6455 47.2965L49.5 28.5Z" />
    </InternalSVG>
  </Toggle>
);

export interface PumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const Pump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: PumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="32" cy="32" r="30" />
      <Line
        x1="32"
        y1="2"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Line
        x1="32"
        y1="62"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
    </InternalSVG>
  </Toggle>
);

export interface BurstDiscProps extends DivProps, SVGBasedPrimitiveProps {}

export const BurstDisc = ({
  className,
  color,
  orientation = "left",
  scale,
  ...props
}: BurstDiscProps): ReactElement => {
  const colorStr = Color.cssString(color);
  return (
    <Div {...props} className={CSS(CSS.B("symbol"), className)}>
      <HandleBoundary orientation={orientation}>
        <Handle location="left" orientation={orientation} left={5} top={50} id="1" />
      </HandleBoundary>
      <InternalSVG
        dimensions={{ width: 40, height: 48 }}
        color={color}
        orientation={orientation}
        scale={scale}
      >
        <Path d="M24 24C24 35.1852 15.2546 44.4725 3.87626 45.8297C2.90571 45.9455 2 45.1407 2 44V4C2 2.85926 2.90571 2.0545 3.87626 2.17027C15.2546 3.52755 24 12.8148 24 24Z" />
        <Path
          d="M37.9706 23.2076C38.4906 23.6079 38.4906 24.3921 37.9706 24.7924L33.86 27.9568C33.2024 28.463 32.25 27.9942 32.25 27.1644V20.8356C32.25 20.0058 33.2024 19.537 33.86 20.0432L37.9706 23.2076Z"
          fill={colorStr}
        />
        <Path d="M33 24H2" strokeLinecap="round" />
      </InternalSVG>
    </Div>
  );
};

export interface ISOBurstDiscProps extends DivProps, SVGBasedPrimitiveProps {}

export interface ISOBurstDiscProps extends DivProps, SVGBasedPrimitiveProps {}

export const ISOBurstDisc = ({
  className,
  color,
  orientation = "left",
  scale,
  ...props
}: ISOBurstDiscProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("symbol"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={11.1111}
        top={50}
        id="1"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 36, height: 72 }} // Reduced to ~2/3 of original size (50x108)
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="4" y="4" width="28" height="64" rx="2" strokeWidth="2" />
      <Path
        d="M13 68V47C13 46.4477 13.4489 45.9892 13.9928 45.8933C16.1351 45.5152 21 43.7981 21 36C21 28.2019 16.1351 26.4848 13.9928 26.1068C13.4489 26.0108 13 25.5523 13 25V4"
        strokeWidth="2"
      />
    </InternalSVG>
  </Div>
);

export interface CapProps extends SVGBasedPrimitiveProps, DivProps {}

export const Cap = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: CapProps): ReactElement => (
  <Div className={CSS(CSS.B("cap"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={7.6923} top={50} id="1" />
    </HandleBoundary>
    <InternalSVG
      color={color}
      dimensions={{ width: 26, height: 48 }}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M24 24C24 35.1852 15.2546 44.4725 3.87626 45.8297C2.90571 45.9455 2 45.1407 2 44V4C2 2.85926 2.90571 2.0545 3.87626 2.17027C15.2546 3.52755 24 12.8148 24 24Z" />
    </InternalSVG>
  </Div>
);

export interface ISOCapProps extends SVGBasedPrimitiveProps, DivProps {}

export const ISOCap = ({
  className,
  orientation = "left",
  color,
  scale = 1,
  ...props
}: ISOCapProps): ReactElement => (
  <Div className={CSS(CSS.B("cap"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={50} top={50} id="1" />
    </HandleBoundary>
    <InternalSVG
      color={color}
      dimensions={{ width: 36, height: 48 }}
      orientation={orientation}
      scale={scale * 0.6}
    >
      <Path
        d="M3 3H30C31.6569 3 33 4.34315 33 6V42C33 43.6569 31.6569 45 30 45H3"
        strokeLinecap="round"
      />
    </InternalSVG>
  </Div>
);

export interface ManualValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const ManualValve = ({
  className,
  orientation = "left",
  color,
  scale,
  enabled = false,
  ...props
}: ManualValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("manual-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={2.2989}
        top={56.25}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={56.25}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 48 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Line x1="43.5" y1="27" x2="43.5" y2="1" />
      <Path d="M19.64 1 L66.68 1" strokeLinecap="round" />
      <Path d="M43.5 27L6.35453 8.20349C4.35901 7.19372 2 8.64384 2 10.8803V43.1197C2 45.3562 4.35901 46.8063 6.35453 45.7965L43.5 27ZM43.5 27L80.6455 8.20349C82.641 7.19372 85 8.64384 85 10.8803V43.1197C85 45.3562 82.641 46.8063 80.6455 45.7965L43.5 27Z" />
    </InternalSVG>
  </Toggle>
);

export interface OrificePlateProps extends SVGBasedPrimitiveProps, DivProps {}

export const OrificePlate = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: OrificePlateProps): ReactElement => (
  <Div className={CSS(CSS.B("orifice_plate"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      color={color}
      dimensions={{ width: 96, height: 48 }}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="3" y="3" width="90" height="42" rx="2" ry="2" />
      <Line x1="33" y1="3" x2="33" y2="21" strokeLinecap="round" />
      <Line x1="33" y1="27" x2="33" y2="45" strokeLinecap="round" />
    </InternalSVG>
  </Div>
);

export interface FilterProps extends SVGBasedPrimitiveProps, DivProps {}

const pixelToPercent = (pixel: number, total: number): number => (pixel / total) * 100;

export const Filter = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: FilterProps): ReactElement => (
  <Div className={CSS(CSS.B("filter"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={11.5385}
        top={50}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={88.4615}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 52, height: 34 }}
      orientation={orientation}
      color={color}
      scale={scale}
    >
      <Path d="M6 17L24.8 2.9C25.5111 2.36667 26.4889 2.36667 27.2 2.9L46 17M6 17L24.8 31.1C25.5111 31.6333 26.4889 31.6333 27.2 31.1L46 17" />
    </InternalSVG>
  </Div>
);

type DetailedBorderRadius = Record<location.CornerXYString, xy.XY>;

type BorderRadius =
  | number
  | Record<direction.Direction, number>
  | Record<location.CornerXYString, number>
  | DetailedBorderRadius;

const parseBorderRadius = (radius: BorderRadius): DetailedBorderRadius => {
  if (typeof radius === "number")
    return {
      topLeft: xy.construct(radius),
      topRight: xy.construct(radius),
      bottomLeft: xy.construct(radius),
      bottomRight: xy.construct(radius),
    };
  if ("x" in radius)
    return {
      topLeft: radius,
      topRight: radius,
      bottomLeft: radius,
      bottomRight: radius,
    };
  if (typeof radius.bottomLeft === "number")
    return {
      topLeft: xy.construct(radius.topLeft),
      topRight: xy.construct(radius.topRight),
      bottomLeft: xy.construct(radius.bottomLeft),
      bottomRight: xy.construct(radius.bottomRight),
    };
  return radius as DetailedBorderRadius;
};

const cssBorderRadius = (radius: DetailedBorderRadius): string => {
  const { topLeft, topRight, bottomLeft, bottomRight } = radius;
  return `${topLeft.x}% ${topRight.x}% ${bottomRight.x}% ${bottomLeft.x}% / ${topLeft.y}% ${topRight.y}% ${bottomRight.y}% ${bottomLeft.y}%`;
};

const DEFAULT_DIMENSIONS = { width: 40, height: 80 };
export const DEFAULT_BORDER_RADIUS = { x: 50, y: 10 };

export interface TankProps extends DivProps {
  dimensions?: dimensions.Dimensions;
  borderRadius?: BorderRadius;
  color?: Color.Crude;
  onResize?: (dimensions: dimensions.Dimensions) => void;
  boxBorderRadius?: number;
  backgroundColor?: Color.Crude;
}

export const Tank = ({
  className,
  dimensions = DEFAULT_DIMENSIONS,
  borderRadius = DEFAULT_BORDER_RADIUS,
  boxBorderRadius,
  color,
  backgroundColor,
  ...props
}: TankProps): ReactElement => {
  const detailedRadius = parseBorderRadius(borderRadius);
  const hasCornerBoundaries = boxBorderRadius == null;
  const t = Theming.use();
  const { width, height } = dimensions;
  const refreshDeps = useMemo(
    () => [dimensions, borderRadius, detailedRadius],
    [
      detailedRadius.bottomLeft,
      detailedRadius.bottomRight,
      detailedRadius.topLeft,
      detailedRadius.topRight,
      height,
      width,
    ],
  );
  const leftOffset = pixelToPercent(1, width);
  const rightOffset = 100 - leftOffset;
  const topOffset = pixelToPercent(1, height);
  const bottomOffset = 100 - topOffset;
  return (
    <Div
      className={CSS(className, CSS.B("tank"))}
      style={{
        ...dimensions,
        borderRadius: boxBorderRadius ?? cssBorderRadius(detailedRadius),
        borderColor: Color.cssString(color ?? t.colors.gray.l9),
        backgroundColor: Color.cssString(backgroundColor),
      }}
      {...props}
    >
      <HandleBoundary refreshDeps={refreshDeps} orientation="left">
        <Handle location="top" orientation="left" left={50} top={topOffset} id="1" />
        {hasCornerBoundaries && (
          <>
            <Handle
              location="top"
              orientation="left"
              left={leftOffset}
              top={detailedRadius.topLeft.y}
              id="2"
            />
            <Handle
              location="top"
              orientation="left"
              left={rightOffset}
              top={detailedRadius.topRight.y}
              id="3"
            />
          </>
        )}
        <Handle
          location="bottom"
          orientation="left"
          left={50}
          top={bottomOffset}
          id="4"
        />
        {hasCornerBoundaries && (
          <>
            <Handle
              location="bottom"
              orientation="left"
              left={leftOffset}
              top={100 - detailedRadius.bottomLeft.y}
              id="5"
            />
            <Handle
              location="bottom"
              orientation="left"
              left={rightOffset}
              top={100 - detailedRadius.bottomRight.y}
              id="6"
            />
          </>
        )}
        <Handle location="left" orientation="left" left={leftOffset} top={50} id="7" />
        <Handle
          location="right"
          orientation="left"
          left={rightOffset}
          top={50}
          id="8"
        />
      </HandleBoundary>
    </Div>
  );
};

export interface RegulatorProps extends DivProps, SVGBasedPrimitiveProps {}

export const Regulator = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: RegulatorProps): ReactElement => (
  <Div className={CSS(className, CSS.B("regulator"))} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={3.4091}
        top={66.25}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7273}
        top={66.25}
        id="2"
      />
      <Handle
        location="top"
        orientation={orientation}
        left={50.9091}
        top={12.5}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 88, height: 80 }}
      orientation={orientation}
      color={color}
      scale={scale}
    >
      <Path d="M44.5 53L7.35453 34.2035C5.35901 33.1937 3 34.6438 3 36.8803V69.1197C3 71.3562 5.35901 72.8063 7.35453 71.7965L44.5 53ZM44.5 53L81.6455 34.2035C83.641 33.1937 86 34.6438 86 36.8803V69.1197C86 71.3562 83.641 72.8063 81.6455 71.7965L44.5 53Z" />
      <Path d="M61 30C62.6569 30 64.0231 28.6494 63.7755 27.0111C63.141 22.8129 61.181 18.8968 58.1421 15.8579C54.3914 12.1071 49.3043 10 44 10C38.6957 10 33.6086 12.1071 29.8579 15.8579C26.819 18.8968 24.859 22.8129 24.2245 27.0111C23.9769 28.6494 25.3431 30 27 30L44.5 30H61Z" />
      <Line x1="44.5" y1="53" x2="44.5" y2="30" strokeLinecap="round" />
      <Path d="M44.5 10V8C44.5 6.34315 45.3431 5 47 5H80C81.6569 5 83 6.34315 83 8V24.4281C83 25.4126 82.517 26.3344 81.7076 26.8947L44.5 53" />
    </InternalSVG>
  </Div>
);

export interface OrificeProps extends DivProps, SVGBasedPrimitiveProps {}

export const Orifice = ({
  className,
  orientation = "left",
  scale,
  color,
  ...props
}: OrificeProps): ReactElement => (
  <Div className={CSS(CSS.B("orifice"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2.8571} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.1429}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 70, height: 34 }}
      orientation={orientation}
      color={color}
      scale={scale}
    >
      <Path d="M2 2.5C27.451 21.3469 60.0915 12.0132 68 2.5" strokeLinecap="round" />
      <Path d="M2 32.5C27.451 13.6531 60.0915 22.9868 68 32.5" strokeLinecap="round" />
    </InternalSVG>
  </Div>
);

export interface NeedleValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const NeedleValve = ({
  className,
  orientation = "left",
  color,
  scale,
  enabled = false,
  ...props
}: NeedleValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("needle-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={2.2989}
        top={51.1905}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7011}
        top={51.1905}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 87, height: 42 }}
      orientation={orientation}
      color={color}
      scale={scale}
    >
      <Path
        d="M43.0152 21.5391L38.237 2.62245C38.1573 2.30658 38.396 2 38.7218 2L48.2782 2C48.604 2 48.8427 2.30658 48.763 2.62245L43.9848 21.5391C43.8576 22.0425 43.1424 22.0425 43.0152 21.5391Z"
        fill={Color.cssString(color)}
      />
      <Path d="M43.5 21.5L6.35453 2.70349C4.35901 1.69372 2 3.14384 2 5.38029V37.6197C2 39.8562 4.35901 41.3063 6.35453 40.2965L43.5 21.5ZM43.5 21.5L80.6455 2.70349C82.641 1.69372 85 3.14384 85 5.3803V37.6197C85 39.8562 82.641 41.3063 80.6455 40.2965L43.5 21.5Z" />
    </InternalSVG>
  </Toggle>
);

export interface AngledReliefValveProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const AngledReliefValve = ({
  color,
  className,
  orientation = "left",
  scale,
  enabled = false,
  ...props
}: AngledReliefValveProps): ReactElement => (
  <Toggle
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("angled-relief-valve"), className)}
    enabled={enabled}
  >
    <HandleBoundary orientation={orientation}>
      <Handle
        location="bottom"
        orientation={orientation}
        left={32.8125}
        top={97.5922}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.0278}
        top={45.5639}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 79 }}
      orientation={orientation}
      color={color}
      scale={scale}
    >
      <Line x1={21} y1={2} x2={21} y2={36.7} strokeLinecap="round" />
      <Path d="M9.05106 14.0802L32.4273 4.29611" strokeLinecap="round" />
      <Path d="M9.05106 20.0802L32.4273 10.2961" strokeLinecap="round" />
      <Path d="M9.05106 26.0802L32.4273 16.2961" strokeLinecap="round" />
      <Path d="M22.3611 35.1077C21.6298 35.4778 21.6298 36.5222 22.3611 36.8923L57.7433 54.7965C59.7388 55.8063 62.0978 54.3562 62.0978 52.1197L62.0978 19.8803C62.0978 17.6438 59.7388 16.1937 57.7433 17.2035L22.3611 35.1077Z" />
      <Path d="M21.8923 37.3611C21.5222 36.6298 20.4778 36.6298 20.1077 37.3611L2.20349 72.7433C1.19372 74.7388 2.64384 77.0978 4.8803 77.0978H37.1197C39.3562 77.0978 40.8063 74.7388 39.7965 72.7433L21.8923 37.3611Z" />
    </InternalSVG>
  </Toggle>
);

export interface ValueProps extends DivProps {
  dimensions?: dimensions.Dimensions;
  color?: Color.Crude;
  units?: string;
  unitsLevel?: Text.Level;
  inlineSize?: number;
}

export const Value = ({
  className,
  color,
  dimensions,
  orientation = "left",
  units = "psi",
  unitsLevel = "small",
  children,
  inlineSize = 80,
  ...props
}: ValueProps): ReactElement => {
  const borderColor = Color.cssString(color);
  const theme = Theming.use();
  const textColor: string | undefined =
    color == null
      ? "var(--pluto-gray-l0)"
      : Color.cssString(
          new Color.Color(color).pickByContrast(
            theme.colors.gray.l0,
            theme.colors.gray.l9,
          ),
        );
  return (
    <Div
      className={CSS(CSS.B("value"), className)}
      {...props}
      style={{
        borderColor,
        height: dimensions?.height,
        width: "100%",
      }}
    >
      <div
        className={CSS.BE("value", "content")}
        style={{ flexGrow: 1, minWidth: dimensions?.width, inlineSize }}
      >
        {children}
      </div>
      <HandleBoundary orientation={orientation}>
        <Handle location="left" orientation="left" left={0} top={50} id="1" />
        <Handle location="right" orientation="left" left={100} top={50} id="2" />
        <Handle location="top" orientation="left" left={50} top={-2} id="3" />
        <Handle location="bottom" orientation="left" left={50} top={102} id="4" />
      </HandleBoundary>
      <div
        className={CSS(CSS.BE("value", "units"), CSS.M(unitsLevel))}
        style={{ background: borderColor }}
      >
        <Text.Text level={unitsLevel} color={textColor}>
          {units}
        </Text.Text>
      </div>
    </Div>
  );
};

export interface SwitchProps extends Omit<ToggleValveButtonProps, "onClick"> {
  onClick?: MouseEventHandler<HTMLInputElement>;
}

export const Switch = ({
  enabled = false,
  onClick,
  orientation = "left",
}: SwitchProps): ReactElement => (
  <Div orientation={orientation}>
    <Input.Switch value={enabled} onClick={onClick} onChange={() => {}} />
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={0} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={100} top={50} id="2" />
    </HandleBoundary>
  </Div>
);

export interface ButtonProps
  extends Omit<DivProps, "onClick">,
    Pick<CoreButton.ButtonProps, "color" | "size" | "level" | "onClickDelay"> {
  label?: string;
  onClick?: MouseEventHandler<HTMLButtonElement>;
  color?: Color.Crude;
}

export const Button = ({
  onClick,
  orientation = "left",
  label = "",
  color,
  size,
  level,
  onClickDelay: delay,
}: ButtonProps): ReactElement => (
  <Div orientation={orientation}>
    <CoreButton.Button
      onClick={onClick}
      color={color}
      size={size}
      level={level}
      onClickDelay={delay}
    >
      {label}
    </CoreButton.Button>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={0} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={100} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={0} id="3" />
      <Handle location="bottom" orientation={orientation} left={50} top={100} id="4" />
    </HandleBoundary>
  </Div>
);

export interface TextBoxProps extends DivProps, Pick<Text.TextProps, "level"> {
  text?: string;
  color?: Color.Crude;
  width?: number;
  align?: Align.Alignment;
  autoFit?: boolean;
}

export const TextBox = ({
  className,
  orientation = "left",
  text = "",
  width,
  color = "var(--pluto-gray-l9)",
  level,
  autoFit,
  align = "center",
}: TextBoxProps): ReactElement => {
  const divStyle: CSSProperties = {
    textAlign: align as CSSProperties["textAlign"],
  };
  if (direction.construct(orientation) === "y")
    divStyle.height = autoFit ? "fit-content" : width;
  else divStyle.width = autoFit ? "fit-content" : width;

  return (
    <Div
      style={divStyle}
      orientation={orientation}
      className={CSS(CSS.B("text-box"), CSS.loc(orientation), className)}
    >
      <Text.Text color={Color.cssString(color)} level={level}>
        {text}
      </Text.Text>
    </Div>
  );
};

export interface SetpointProps
  extends Omit<DivProps, "onClick" | "value" | "onChange">,
    Input.Control<number>,
    Pick<Input.NumericProps, "size"> {
  dimensions?: dimensions.Dimensions;
  color?: Color.Crude;
  units?: string;
  onClick?: MouseEventHandler<HTMLButtonElement>;
  disabled?: boolean;
}

export const Setpoint = ({
  orientation = "left",
  className,
  onClick,
  children,
  value,
  units,
  color,
  onChange,
  size = "small",
  disabled,
  ...props
}: SetpointProps): ReactElement => {
  const [currValue, setCurrValue] = useState(value);
  return (
    <Div
      className={CSS(CSS.B("setpoint"), className)}
      orientation={orientation}
      {...props}
    >
      <HandleBoundary orientation={orientation}>
        <Handle location="left" orientation={orientation} left={0.5} top={50} id="1" />
        <Handle
          location="right"
          orientation={orientation}
          left={100}
          top={50}
          id="2"
          // Filled button has a z-index of 4 so we need to set this higher to show handle above
          style={{ zIndex: 5 }}
        />
        <Handle location="top" orientation={orientation} left={50} top={-2} id="3" />
        <Handle
          location="bottom"
          orientation={orientation}
          left={50}
          top={102}
          id="4"
        />
      </HandleBoundary>
      <Input.Numeric
        size={size}
        value={currValue}
        onChange={setCurrValue}
        showDragHandle={false}
        selectOnFocus
        endContent={units}
        outlineColor={color}
        borderWidth={1}
      >
        <CoreButton.Button
          size={size}
          variant="filled"
          onClick={() => onChange(currValue)}
          color={color}
        >
          Set
        </CoreButton.Button>
      </Input.Numeric>
    </Div>
  );
};

export interface ScrewPumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const ScrewPump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: ScrewPumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("screw-pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="32" cy="32" r="30" />
      <Line
        x1="32"
        y1="2"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Line
        x1="32"
        y1="62"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Path
        d="M 0 0, L -10 -10, M 0 0, L -10 10"
        transform="translate(32, 32)"
        strokeLinecap="round"
        className={CSS(CSS.M("detail"), className)}
      />
      <Path
        d="M 0 0, L -10 -10, M 0 0, L -10 10"
        transform="translate(42, 32)"
        strokeLinecap="round"
        className={CSS(CSS.M("detail"), className)}
      />
    </InternalSVG>
  </Toggle>
);

export interface VacuumPumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const VacuumPump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: VacuumPumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("vacuum-pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z" />
    </InternalSVG>
  </Toggle>
);

export interface CavityPumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const CavityPump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: CavityPumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("cavity-pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="32" cy="32" r="30" />
      <Line
        x1="32"
        y1="2"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Line
        x1="32"
        y1="62"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Path
        d="M 17 26 C 17 20.6667 23 20.6667 23 26 C 23 31.3333 29 31.3333 29 26 C 29 20.6667 35 20.6667 35 26"
        strokeLinecap="round"
        transform="translate(6, 6)"
        className={CSS(CSS.M("detail"), className)}
      />
    </InternalSVG>
  </Toggle>
);

export interface PistonPumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const PistonPump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: PistonPumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("piston-pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="32" cy="32" r="30" />
      <Line
        x1="32"
        y1="2"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Line
        x1="32"
        y1="62"
        x2="62"
        y2="32"
        className={CSS(CSS.M("detail"), className)}
      />
      <Path
        d="M 23 32, h 16, m 0 -8, v 16"
        className={CSS(CSS.M("detail"), className)}
        strokeLinecap="round"
      />
    </InternalSVG>
  </Toggle>
);

export interface StaticMixerProps extends DivProps, SVGBasedPrimitiveProps {}

export const StaticMixer = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: StaticMixerProps): ReactElement => (
  <Div
    {...props}
    className={CSS(CSS.B("static-mixer"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.5152} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.4848}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.3333} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.6667}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 30 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="1" y="1" width="64" height="28" rx="2" ry="2" />
      <Path d="M17 10C23 10 27 20 33 20C39 20 43 10 49 10" strokeLinecap="round" />
      <Path d="M17 20C23 20 27 10 33 10C39 10 43 20 49 20" strokeLinecap="round" />
    </InternalSVG>
  </Div>
);

export interface RotaryMixerProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const RotaryMixer = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: RotaryMixerProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("rotary-mixer"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={2} top={48.4849} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={97.5}
        top={48.4849}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 50, height: 33 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M1 30V2C1 1.44772 1.44772 1 2 1H35.4545C35.7434 1 36.0181 1.12487 36.208 1.34247L48.4262 15.3425C48.7549 15.7192 48.7549 16.2808 48.4262 16.6575L36.208 30.6575C36.0181 30.8751 35.7434 31 35.4545 31H2C1.44772 31 1 30.5523 1 30Z" />
      <Line
        x1="32"
        y1="16"
        x2="40"
        y2="16"
        strokeLinecap="round"
        className={CSS(CSS.M("detail"), className)}
      />
      <Line
        x1="32"
        y1="16"
        x2="28"
        y2="22.9282"
        strokeLinecap="round"
        className={CSS(CSS.M("detail"), className)}
      />
      <Line
        x1="32"
        y1="16"
        x2="28"
        y2="9.0717"
        strokeLinecap="round"
        className={CSS(CSS.M("detail"), className)}
      />
    </InternalSVG>
  </Toggle>
);

export interface LightProps extends DivProps, SVGBasedPrimitiveProps {
  enabled?: boolean;
}

export const Light = ({
  className,
  color,
  orientation = "left",
  enabled,
  scale,
  ...props
}: LightProps): ReactElement => (
  <Div
    {...props}
    orientation={orientation}
    className={CSS(CSS.B("light"), enabled && CSS.M("enabled"), className)}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.75}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Circle cx="32" cy="32" r="30" />
    </InternalSVG>
  </Div>
);

export interface ElectricRegulatorProps extends DivProps, SVGBasedPrimitiveProps {}

export const ElectricRegulator = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: ElectricRegulatorProps): ReactElement => (
  <Div className={CSS(className, CSS.B("regulator"))} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={3.4091}
        top={66.25}
        id="1"
      />
      <Handle
        location="right"
        orientation={orientation}
        left={97.7273}
        top={66.25}
        id="2"
      />
      <Handle
        location="left"
        orientation={orientation}
        left={21.5909}
        top={25}
        id="3"
      />
      <Handle location="top" orientation={orientation} left={50} top={12.5} id="4" />
      <Handle
        location="right"
        orientation={orientation}
        left={(70 / 88) * 100}
        top={(20 / 80) * 100}
        id="5"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 88, height: 80 }}
      orientation={orientation}
      color={color}
      scale={scale}
    >
      <Path d="M44.5 53L7.35453 34.2035C5.35901 33.1937 3 34.6438 3 36.8803V69.1197C3 71.3562 5.35901 72.8063 7.35453 71.7965L44.5 53ZM44.5 53L81.6455 34.2035C83.641 33.1937 86 34.6438 86 36.8803V69.1197C86 71.3562 83.641 72.8063 81.6455 71.7965L44.5 53Z" />
      <Rect x="19" y="10" width="51" height="20" rx="3" ry="3" />
      <Line x1="44.5" y1="53" x2="44.5" y2="30" strokeLinecap="round" />
      <Path d="M44.5 10V8C44.5 6.34315 45.3431 5 47 5H80C81.6569 5 83 6.34315 83 8V24.4281C83 25.4126 82.517 26.3344 81.7076 26.8947L44.5 53" />
    </InternalSVG>
  </Div>
);

export interface AgitatorProps extends ToggleProps, SVGBasedPrimitiveProps {
  height?: number;
}

export const Agitator = ({
  height = 86,
  orientation = "left",
  color,
  scale,
  ...props
}: AgitatorProps): ReactElement => (
  <Toggle {...props} className={CSS(CSS.B("agitator"))}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="top"
        orientation={orientation}
        left={50}
        top={100 / height}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 86, height }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M1 85V48.8541C1 46.624 3.34694 45.1735 5.34164 46.1708L80.6584 83.8292 C82.6531 84.8265 85 83.376 85 81.1459 V44" />
      <Path d="M43 1L45 65" />
    </InternalSVG>
  </Toggle>
);

export interface PropellerAgitatorProps extends AgitatorProps {}

export const PropellerAgitator = ({
  height = 86,
  orientation = "left",
  color,
  scale,
  ...props
}: PropellerAgitatorProps): ReactElement => (
  <Toggle {...props} className={CSS(CSS.B("agitator"))}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="top"
        orientation={orientation}
        left={50.5814}
        top={200 / height}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 86, height }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M43.5 69.573L14.9534 55.6147C8.97428 52.6911 2 57.0443 2 63.6999V75.4462C2 82.1018 8.97429 86.455 14.9534 83.5314L43.5 69.573ZM43.5 69.573L72.0466 55.6147C78.0257 52.6911 85 57.0443 85 63.6999V75.4462C85 82.1018 78.0257 86.455 72.0466 83.5314L43.5 69.573Z" />
      <Path d="M43.5 69.6L43.5 2" strokeLinecap="round" />
    </InternalSVG>
  </Toggle>
);

export interface FlatBladeAgitatorProps extends AgitatorProps {}

export const FlatBladeAgitator = ({
  height = 86,
  orientation = "left",
  color,
  scale,
  ...props
}: FlatBladeAgitatorProps): ReactElement => (
  <Toggle {...props} className={CSS(CSS.B("agitator"))}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="top"
        orientation={orientation}
        left={50}
        top={100 / height}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 86, height }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Line x1="43" y1="1" x2="43" y2="49" />
      <Rect x="3" y="49" width="80" height="34" rx="3" strokeLinecap="round" />
    </InternalSVG>
  </Toggle>
);

export interface PaddleAgitatorProps extends AgitatorProps {}

export const PaddleAgitator = ({
  height = 86,
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: PaddleAgitatorProps): ReactElement => (
  <Toggle {...props} className={CSS(CSS.B("agitator"))}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="top"
        orientation={orientation}
        left={50}
        top={100 / height}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 86, height }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Line x1="43" y1="1" x2="43" y2="49" />
      <Rect x="3" y="49" width="80" height="34" rx="3" />
      <Line
        x1="3.8"
        y1="82.1"
        x2="43"
        y2="49"
        className={CSS(CSS.M("detail"), className)}
        strokeLinecap="round"
      />
      <Line
        x1="43"
        y1="49"
        x2="43"
        y2="83"
        className={CSS(CSS.M("detail"), className)}
        strokeLinecap="round"
      />
      <Line
        x1="43"
        y1="83"
        x2="82.2"
        y2="49.9"
        className={CSS(CSS.M("detail"), className)}
        strokeLinecap="round"
      />
    </InternalSVG>
  </Toggle>
);

export interface CrossBeamAgitatorProps extends AgitatorProps {}

export const CrossBeamAgitator = ({
  className,
  height = 86,
  orientation = "left",
  color,
  scale,
  ...props
}: CrossBeamAgitatorProps): ReactElement => (
  <Toggle {...props} className={CSS(CSS.B("agitator"))}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="top"
        orientation={orientation}
        left={50}
        top={100 / height}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 86, height }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Line x1="43" y1="1" x2="43" y2="49" strokeLinecap="round" />
      <Line x1="3" y1="49" x2="83" y2="49" strokeLinecap="round" />
      <Line x1="3" y1="83" x2="83" y2="83" strokeLinecap="round" />
      <Line x1="43" y1="49" x2="43" y2="83" strokeLinecap="round" />
      {/* We need this rectangle here because so that when a user hovers above to click the agitator, the rectangle changes color */}
      <Rect x="3" y="49" width="80" height="34" strokeWidth={0} />
    </InternalSVG>
  </Toggle>
);

export interface HelicalAgitatorProps extends AgitatorProps {}

export const HelicalAgitator = ({
  className,
  height = 86,
  orientation = "left",
  color,
  scale,
  ...props
}: HelicalAgitatorProps): ReactElement => (
  <Toggle {...props} className={CSS(CSS.B("agitator"))}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="top"
        orientation={orientation}
        left={50}
        top={100 / height}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 86, height }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Line x1={43} y1={1} x2={43} y2={60} strokeLinecap="round" />
      <Path
        d="M5.375 36L70.8204 48.7138C74.0584 49.3428 74.0573 53.9765 70.8189 54.6039L14.7952 65.4584C11.5729 66.0827 11.5494 70.6856 14.7651 71.3429L81.5208 84.9873"
        strokeLinecap="round"
      />
    </InternalSVG>
  </Toggle>
);

export interface OffPageReferenceProps extends DivProps {
  label?: string;
  level?: Text.TextProps["level"];
  color?: Color.Crude;
  onLabelChange?: (label: string) => void;
}

export const OffPageReference: React.FC<OffPageReferenceProps> = ({
  id,
  className,
  orientation = "right",
  label = "text",
  color = "black",
  level = "p",
  onLabelChange,
  ...props
}) => {
  const element = document.querySelector(`[data-id="${id}"]`);
  // add the orientation to the class list
  if (element) element.classList.add(orientation);

  const swap = direction.construct(orientation) === "y";

  return (
    <Div
      className={CSS(CSS.B("arrow"), CSS.loc(orientation), className)}
      orientation={orientation}
      {...props}
    >
      <div className="wrapper">
        <div className="outline" style={{ backgroundColor: Color.cssString(color) }}>
          <div className="bg">
            <Text.MaybeEditable
              value={label}
              onChange={onLabelChange}
              level={level}
              className={CSS.BE("symbol", "label")}
            />
          </div>
        </div>
      </div>
      <HandleBoundary orientation={orientation}>
        <Handle
          location="left"
          orientation={orientation}
          preventAutoAdjust
          left={98}
          top={50}
          swap={swap}
          id="1"
        />
        <Handle
          location="right"
          preventAutoAdjust
          orientation={orientation}
          left={1}
          top={50}
          swap={swap}
          id="2"
        />
      </HandleBoundary>
      <svg
        style={{ visibility: "hidden", position: "absolute" }}
        width="0"
        height="0"
        xmlns="http://www.w3.org/2000/svg"
        version="1.1"
      >
        <defs>
          <filter id="goo">
            <feGaussianBlur in="SourceGraphic" stdDeviation="1.5" result="blur" />
            <feColorMatrix
              in="blur"
              mode="matrix"
              values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9"
              result="goo"
            />
            <feComposite in="SourceGraphic" in2="goo" operator="atop" />
          </filter>
        </defs>
      </svg>
    </Div>
  );
};

export interface VentProps extends SVGBasedPrimitiveProps, DivProps {}

export const Vent = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: VentProps): ReactElement => (
  <Div className={CSS(CSS.B("vent"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle
        location="left"
        orientation={orientation}
        left={22.7273}
        top={50}
        id="1"
      />
      <Handle location="right" orientation={orientation} left={80} top={50} id="2" />
    </HandleBoundary>
    <InternalSVG
      color={color}
      dimensions={{ width: 22, height: 32 }}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M5 3L16.6325 13.8016C17.9107 14.9885 17.9107 17.0115 16.6325 18.1984L5 29"
        strokeLinecap="round"
      />
    </InternalSVG>
  </Div>
);

export interface ISOFilterProps extends SVGBasedPrimitiveProps, DivProps {}

export const ISOFilter = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: ISOFilterProps): ReactElement => (
  <Div className={CSS(CSS.B("iso-filter"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="right" orientation={orientation} left={95} top={50} id="1" />
      <Handle location="left" orientation={orientation} left={5} top={50} id="2" />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 60, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="3" y="3" width="54" height="36" rx="3" ry="3" />
      <Line x1="30" y1="3" x2="30" y2="13" strokeLinecap="round" />
      <Line x1="30" y1="17" x2="30" y2="25" strokeLinecap="round" />
      <Line x1="30" y1="29" x2="30" y2="39" strokeLinecap="round" />
    </InternalSVG>
  </Div>
);

export interface CylinderProps extends DivProps {
  dimensions?: dimensions.Dimensions;
  borderRadius?: BorderRadius;
  color?: Color.Crude;
  onResize?: (dimensions: dimensions.Dimensions) => void;
  boxBorderRadius?: number;
  backgroundColor?: Color.Crude;
}

export const Cylinder = ({
  className,
  dimensions = DEFAULT_DIMENSIONS,
  borderRadius = DEFAULT_BORDER_RADIUS,
  boxBorderRadius,
  color,
  backgroundColor,
  ...props
}: CylinderProps): ReactElement => {
  const detailedRadius = parseBorderRadius(borderRadius);
  const t = Theming.use();
  const refreshDeps = useMemo(
    () => [dimensions, borderRadius, detailedRadius],
    [
      detailedRadius.bottomLeft,
      detailedRadius.bottomRight,
      detailedRadius.topLeft,
      detailedRadius.topRight,
      dimensions.height,
      dimensions.width,
    ],
  );
  const boardColor = Color.cssString(color ?? t.colors.gray.l9);
  const bgColor =
    backgroundColor == null ? undefined : Color.cssString(backgroundColor);
  const widthScale = dimensions.width / 66;
  const heightScale = dimensions.height / 180;
  const transform = `scale(${widthScale},${heightScale})`;

  return (
    <Div
      className={CSS(className, CSS.B("cylinder"))}
      style={{
        ...dimensions,
      }}
      {...props}
    >
      <svg
        width="100%"
        height="100%"
        viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        transform={transform}
      >
        <path
          d="M23 33.6712C11.9844 36.0332 3 42.4382 3 52.8862V174.568C3 176.225 4.34315 177.568 6 177.568H60C61.6569 177.568 63 176.225 63 174.568V52.8862C63 36.3342 40.4511 29.9292 23 33.6712ZM23 33.6712V13.3181C23 0.318109 42.9975 0.318123 42.9975 13.3181V33.6712"
          vectorEffect={"non-scaling-stroke"}
          strokeWidth="2"
          stroke={boardColor}
          transform={transform}
          fill={bgColor}
        />
      </svg>
      <HandleBoundary refreshDeps={refreshDeps} orientation="left">
        {/* Top  */}
        <Handle location="top" orientation="left" left={50} top={2} id="1" />
        <Handle location="left" orientation="left" left={35} top={10} id="9" />
        <Handle location="right" orientation="left" left={65} top={10} id="10" />
        {/* Bottom */}
        <Handle location="bottom" orientation="left" left={50} top={98.3333} id="2" />
        {/* Main body */}
        <Handle location="left" orientation="left" left={4} top={40} id="3" />
        <Handle location="right" orientation="left" left={96} top={40} id="4" />
        <Handle location="left" orientation="left" left={4} top={60} id="5" />
        <Handle location="right" orientation="left" left={96} top={60} id="6" />
        <Handle location="left" orientation="left" left={4} top={80} id="7" />
        <Handle location="right" orientation="left" left={96} top={80} id="8" />
      </HandleBoundary>
    </Div>
  );
};

export interface SpringLoadedReliefValveProps
  extends ToggleProps,
    SVGBasedPrimitiveProps {}

export const SpringLoadedReliefValve = ({
  className,
  orientation = "left",
  color,
  scale,
  enabled = false,
  ...props
}: SpringLoadedReliefValveProps): ReactElement => {
  const colorStr = Color.cssString(color);
  return (
    <Toggle
      {...props}
      orientation={orientation}
      className={CSS(CSS.B("spring-loaded-relief-valve"), className)}
      enabled={enabled}
    >
      <HandleBoundary orientation={orientation}>
        <Handle
          location="left"
          orientation={orientation}
          left={2.1373}
          top={69.0785}
          id="1"
        />
        <Handle
          location="right"
          orientation={orientation}
          left={96.7416}
          top={72.368}
          id="2"
        />
      </HandleBoundary>
      <InternalSVG
        dimensions={{ width: 89, height: 76 }}
        color={color}
        orientation={orientation}
        scale={scale}
      >
        <Path
          d="M46.3625 54.1079C45.6312 54.4779 45.6311 55.5223 46.3624 55.8924L81.7435 73.7989C83.7389 74.8088 86.098 73.3588 86.0982 71.1224L86.1002 38.883C86.1003 36.6465 83.7414 35.1962 81.7458 36.2059L46.3625 54.1079Z"
          stroke={colorStr}
        />
        <Path
          d="M71 38.0014V72.0014"
          stroke={colorStr}
          strokeWidth={4}
          strokeLinecap="round"
        />
        <Path
          d="M41.6389 55.8923C42.3702 55.5222 42.3702 54.4778 41.6389 54.1077L6.2567 36.2035C4.26118 35.1937 1.90217 36.6438 1.90217 38.8803L1.90217 71.1197C1.90217 73.3562 4.26119 74.8063 6.2567 73.7965L41.6389 55.8923Z"
          stroke={colorStr}
        />
        <Circle cx="44" cy="55" r="4" fill={colorStr} />
        <Path
          d="M45 4C45 3.44772 44.5523 3 44 3C43.4477 3 43 3.44772 43 4H45ZM37.5777 24.7889L38.0249 23.8944L37.5777 24.7889ZM37.5777 21.2111L38.0249 22.1056L37.5777 21.2111ZM50.4223 31.2111L49.9751 32.1056L50.4223 31.2111ZM37.5777 44.7889L37.1305 45.6833L37.5777 44.7889ZM37.5777 41.2111L37.1305 40.3167L37.5777 41.2111ZM42.8944 47.4472L42.4472 48.3416L42.8944 47.4472ZM45 52V49.2361H43V52H45ZM43.3416 46.5528L38.0249 43.8944L37.1305 45.6833L42.4472 48.3416L43.3416 46.5528ZM38.0249 42.1056L50.8695 35.6833L49.9751 33.8944L37.1305 40.3167L38.0249 42.1056ZM50.8695 30.3167L38.0249 23.8944L37.1305 25.6833L49.9751 32.1056L50.8695 30.3167ZM38.0249 22.1056L50.8695 15.6833L49.9751 13.8944L37.1305 20.3167L38.0249 22.1056ZM50.8695 10.3167L45.5528 7.65836L44.6584 9.44721L49.9751 12.1056L50.8695 10.3167ZM45 6.76393V4H43V6.76393H45ZM45.5528 7.65836C45.214 7.48897 45 7.1427 45 6.76393H43C43 7.90025 43.642 8.93904 44.6584 9.44721L45.5528 7.65836ZM50.8695 15.6833C53.0806 14.5777 53.0807 11.4223 50.8695 10.3167L49.9751 12.1056C50.7121 12.4741 50.7121 13.5259 49.9751 13.8944L50.8695 15.6833ZM38.0249 23.8944C37.2879 23.5259 37.2879 22.4741 38.0249 22.1056L37.1305 20.3167C34.9193 21.4223 34.9194 24.5777 37.1305 25.6833L38.0249 23.8944ZM50.8695 35.6833C53.0806 34.5777 53.0807 31.4223 50.8695 30.3167L49.9751 32.1056C50.7121 32.4741 50.7121 33.5259 49.9751 33.8944L50.8695 35.6833ZM38.0249 43.8944C37.2879 43.5259 37.2879 42.4741 38.0249 42.1056L37.1305 40.3167C34.9193 41.4223 34.9194 44.5777 37.1305 45.6833L38.0249 43.8944ZM45 49.2361C45 48.0998 44.358 47.061 43.3416 46.5528L42.4472 48.3416C42.786 48.511 43 48.8573 43 49.2361H45Z"
          fill={colorStr}
          strokeWidth={1}
        />
      </InternalSVG>
    </Toggle>
  );
};

export interface AngledSpringLoadedReliefValveProps
  extends ToggleProps,
    SVGBasedPrimitiveProps {}

export const AngledSpringLoadedReliefValve = ({
  className,
  orientation = "left",
  color,
  scale,
  enabled = false,
  ...props
}: AngledSpringLoadedReliefValveProps): ReactElement => {
  const colorStr = Color.cssString(color);
  return (
    <Toggle
      {...props}
      orientation={orientation}
      className={CSS(CSS.B("spring-loaded-relief-valve"), className)}
      enabled={enabled}
    >
      <HandleBoundary orientation={orientation}>
        <Handle
          location="bottom"
          orientation={orientation}
          left={31.8182}
          top={98}
          id="1"
        />
        <Handle
          location="right"
          orientation={orientation}
          left={95.6061}
          top={55.5185}
          id="2"
        />
      </HandleBoundary>
      <InternalSVG
        dimensions={{ width: 66, height: 101 }}
        color={color}
        orientation={orientation}
        scale={scale}
      >
        <Path d="M23.3625 55.6237C22.6312 55.9937 22.6311 57.0381 23.3624 57.4082L58.7435 75.3147C60.7389 76.3246 63.098 74.8747 63.0981 72.6382L63.1001 40.3988C63.1003 38.1624 60.7414 36.7121 58.7458 37.7217L23.3625 55.6237Z" />
        <Path d="M48 38.633V72.633" strokeLinecap="round" strokeWidth={4} />
        <Path d="M21.8923 58.4348C21.5222 57.7035 20.4778 57.7035 20.1077 58.4348L2.20349 93.817C1.19372 95.8125 2.64384 98.1715 4.8803 98.1715H37.1197C39.3562 98.1715 40.8063 95.8125 39.7965 93.817L21.8923 58.4348Z" />
        <Circle cx="21" cy="56.0737" r="4" fill={colorStr} />
        <Path
          d="M21 53.0105V50.0225C21 49.3397 20.6516 48.704 20.0759 48.3366L15.6419 45.507C14.4098 44.7207 14.4098 42.9214 15.6419 42.1351L26.3581 35.2965C27.5902 34.5102 27.5902 32.7109 26.3581 31.9246L15.6419 25.0859C14.4098 24.2997 14.4098 22.5003 15.6419 21.714L26.3581 14.8754C27.5902 14.0891 27.5902 12.2898 26.3581 11.5035L21.9241 8.67393C21.3484 8.30656 21 7.67087 21 6.98798V4"
          stroke={colorStr}
          strokeLinecap="round"
        />
      </InternalSVG>
    </Toggle>
  );
};

export interface TJunctionProps extends DivProps, SVGBasedPrimitiveProps {}

export const TJunction = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: TJunctionProps): ReactElement => (
  <Div className={CSS(CSS.B("t-junction"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={20} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={20}
        id="2"
      />
      <Handle location="bottom" orientation={orientation} left={50} top={95} id="3" />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 36, height: 18 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M0 4V2C0 0.895431 0.895431 0 2 0H34C35.1046 0 36 0.89543 36 2V4C36 5.10457 35.1046 6 34 6H23C21.8954 6 21 6.89543 21 8V16C21 17.1046 20.1046 18 19 18H17C15.8954 18 15 17.1046 15 16V8C15 6.89543 14.1046 6 13 6H2C0.895431 6 0 5.10457 0 4Z"
        fill={Color.cssString(color)}
        stroke="none"
      />
    </InternalSVG>
  </Div>
);

export interface CrossJunctionProps extends DivProps, SVGBasedPrimitiveProps {}

export const CrossJunction = ({
  className,
  orientation = "left",
  color,
  scale,
  ...props
}: CrossJunctionProps): ReactElement => (
  <Div className={CSS(CSS.B("t-junction"), className)} {...props}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={5} top={49} id="1" />
      <Handle location="right" orientation={orientation} left={95} top={49} id="2" />
      <Handle location="bottom" orientation={orientation} left={50} top={95} id="3" />
      <Handle location="top" orientation={orientation} left={50} top={5} id="4" />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 36, height: 36 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M21 34C21 35.1046 20.1046 36 19 36H17C15.8954 36 15 35.1046 15 34V23C15 21.8954 14.1046 21 13 21H2C0.895432 21 0 20.1046 0 19V17C0 15.8954 0.895432 15 2 15H13C14.1046 15 15 14.1046 15 13V2C15 0.895432 15.8954 0 17 0H19C20.1046 0 21 0.895432 21 2V13C21 14.1046 21.8954 15 23 15H34C35.1046 15 36 15.8954 36 17V19C36 20.1046 35.1046 21 34 21H23C21.8954 21 21 21.8954 21 23V34Z"
        fill={Color.cssString(color)}
        stroke="none"
      />
    </InternalSVG>
  </Div>
);

export interface FlowmeterGeneralProps extends DivProps, SVGBasedPrimitiveProps {}

interface FlowLabelProps {
  position?: xy.XY;
  color: Color.Crude;
}

const FlowmeterLabel = ({ position, color }: FlowLabelProps) => (
  <text
    x={position?.x ?? 57}
    y={position?.y ?? 27}
    style={{ fill: Color.cssString(color), fontWeight: 450 }}
    stroke="none"
  >
    F
  </text>
);

export const FlowmeterGeneral = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterGeneralProps) => (
  <Div {...props} className={CSS(CSS.B("flowmeter-general"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <FlowmeterLabel position={{ x: 56, y: 25 }} color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterElectromagneticProps
  extends DivProps,
    SVGBasedPrimitiveProps {}

export const FlowmeterElectromagnetic = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterElectromagneticProps) => (
  <Div {...props} className={CSS(CSS.B("flowmeter-Electromagnetic"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M47.5 17.5H55.5" stroke-linecap="round" />
      <Path d="M15.5 17.5H23.5" stroke-linecap="round" />
      <Path
        d="M23.5 17.5C23.5 16.9747 23.6035 16.4546 23.8045 15.9693C24.0055 15.484 24.3001 15.043 24.6716 14.6716C25.043 14.3001 25.484 14.0055 25.9693 13.8045C26.4546 13.6035 26.9747 13.5 27.5 13.5C28.0253 13.5 28.5454 13.6035 29.0307 13.8045C29.516 14.0055 29.957 14.3001 30.3284 14.6716C30.6999 15.043 30.9945 15.484 31.1955 15.9693C31.3965 16.4546 31.5 16.9747 31.5 17.5"
        stroke-width="2"
      />
      <Path
        d="M31.5 17.5C31.5 16.9747 31.6035 16.4546 31.8045 15.9693C32.0055 15.484 32.3001 15.043 32.6716 14.6716C33.043 14.3001 33.484 14.0055 33.9693 13.8045C34.4546 13.6035 34.9747 13.5 35.5 13.5C36.0253 13.5 36.5454 13.6035 37.0307 13.8045C37.516 14.0055 37.957 14.3001 38.3284 14.6716C38.6999 15.043 38.9945 15.484 39.1955 15.9693C39.3965 16.4546 39.5 16.9747 39.5 17.5"
        stroke-width="2"
      />
      <Path
        d="M39.5 17.5C39.5 16.9747 39.6035 16.4546 39.8045 15.9693C40.0055 15.484 40.3001 15.043 40.6716 14.6716C41.043 14.3001 41.484 14.0055 41.9693 13.8045C42.4546 13.6035 42.9747 13.5 43.5 13.5C44.0253 13.5 44.5454 13.6035 45.0307 13.8045C45.516 14.0055 45.957 14.3001 46.3284 14.6716C46.6999 15.043 46.9945 15.484 47.1955 15.9693C47.3965 16.4546 47.5 16.9747 47.5 17.5"
        stroke-width="2"
      />
      <FlowmeterLabel position={{ x: 58, y: 29 }} color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterVariableAreaProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterVariableArea = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterVariableAreaProps) => (
  <Div {...props} className={CSS(CSS.B("flowmeter-VariableArea"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M46 10V25" />
      <Path d="M23 13V22" />
      <Path d="M23 13L46 10" />
      <Path d="M23 22L46 25" />
      <FlowmeterLabel color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterCoriolisProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterCoriolis = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterCoriolisProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-Coriolis"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M2 17.6024H28.5" stroke-linecap="round" />
      <Path d="M28.5 17.6024L34.6834 14.0324" stroke-linecap="round" />
      <Path d="M34.8 14L45.9058 20.9666" stroke-linecap="round" />
      <Path d="M51.5 17.6024L46.0141 20.8987" stroke-linecap="round" />
      <Path d="M20.5 17.6024L26.6574 14.0474" stroke-linecap="round" />
      <Path d="M26.75 14.1024L37.788 21.0265" stroke-linecap="round" />
      <Path d="M43.5 17.6024L37.8427 21.0017" stroke-linecap="round" />
      <Path d="M43.5 17.6024H69" stroke-linecap="round" />
      <FlowmeterLabel position={{ x: 58, y: 29 }} color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterNozzleProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterNozzle = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterNozzleProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-Nozzle"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M24 2V7V12" stroke-linecap="round" />
      <Path d="M24 12H34" stroke-linecap="round" />
      <Path d="M24 23H29H34" stroke-linecap="round" />
      <Path d="M24 33V23" stroke-linecap="round" />
      <FlowmeterLabel color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterVenturiProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterVenturi = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterVenturiProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-Venturi"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M8 33L26.5329 22.3" stroke-linecap="round" />
      <Path d="M8 2L26.5329 12.7" stroke-linecap="round" />
      <Path d="M56 33L26.5876 22.2948" stroke-linecap="round" />
      <Path d="M56 2L26.5876 12.7052" stroke-linecap="round" />
      <FlowmeterLabel position={{ x: 56, y: 29 }} color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterRingPistonProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterRingPiston = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterRingPistonProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-RingPiston"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Circle cx="36.5" cy="17.5" r="10.5" stroke-width="2" />
      <Circle cx="36.5" cy="21.5" r="6.5" stroke-width="2" />
      <FlowmeterLabel position={{ x: 56, y: 29 }} color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterPositiveDisplacementProps
  extends DivProps,
    SVGBasedPrimitiveProps {}

export const FlowmeterPositiveDisplacement = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterPositiveDisplacementProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-PositiveDisplacement"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path
        d="M41 13C41 15.4853 38.9853 17.5 36.5 17.5C34.0147 17.5 32 15.4853 32 13C32 10.5147 34.0147 8.5 36.5 8.5C38.9853 8.5 41 10.5147 41 13Z"
        stroke-width="2"
      />
      <Path
        d="M41 22C41 24.4853 38.9853 26.5 36.5 26.5C34.0147 26.5 32 24.4853 32 22C32 19.5147 34.0147 17.5 36.5 17.5C38.9853 17.5 41 19.5147 41 22Z"
        stroke-width="2"
      />
      <FlowmeterLabel color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterTurbineProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterTurbine = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterTurbineProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-Turbine"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M16.5 17.5H54.5" stroke-linecap="round" />
      <Path d="M32.5 9L35.4756 17.1753" stroke-linecap="round" />
      <Path d="M38.5 26L35.5244 17.8247" stroke-linecap="round" />
      <Path d="M32.5 26L35.4756 17.8247" stroke-linecap="round" />
      <Path d="M38.5 9L35.5244 17.1753" stroke-linecap="round" />
      <Path
        d="M32.5 9C32.5 8.20435 32.8161 7.44129 33.3787 6.87868C33.9413 6.31607 34.7044 6 35.5 6C36.2956 6 37.0587 6.31607 37.6213 6.87868C38.1839 7.44129 38.5 8.20435 38.5 9"
        stroke-width="2"
      />
      <Path
        d="M38.5 26C38.5 26.7956 38.1839 27.5587 37.6213 28.1213C37.0587 28.6839 36.2956 29 35.5 29C34.7044 29 33.9413 28.6839 33.3787 28.1213C32.8161 27.5587 32.5 26.7956 32.5 26"
        stroke-width="2"
      />
      <FlowmeterLabel color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterPulseProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterPulse = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterPulseProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-Pulse"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={5.714} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={94.386}
        id="3"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M31 13.5H39" stroke-linecap="round" />
      <Path d="M23 21.5H31" stroke-linecap="round" />
      <Path d="M39 21.5H47" stroke-linecap="round" />
      <Path d="M39 13.5V21.5" stroke-linecap="round" />
      <Path d="M31 13.5V21.5" stroke-linecap="round" />
      <FlowmeterLabel color={color} />
    </InternalSVG>
  </Div>
);

export interface FlowmeterFloatSensorProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlowmeterFloatSensor = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: FlowmeterFloatSensorProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flowmeter-FloatSensor"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={1.6667} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.3333}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 71, height: 35 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="67" height="31" rx="2" />
      <Path d="M25 8H46" stroke-linecap="round" />
      <Path d="M31 27H40" stroke-linecap="round" />
      <Path d="M31 27L25.046 8.11641" stroke-linecap="round" />
      <Path d="M40 27L45.954 8.11641" stroke-linecap="round" />
      <FlowmeterLabel color={color} />
    </InternalSVG>
  </Div>
);

export interface HeatExchangerGeneralProps extends DivProps, SVGBasedPrimitiveProps {}

export const HeatExchangerGeneral = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: HeatExchangerGeneralProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("heat-exchanger-general"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.545} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={95.454}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={4.545} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.454}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M3 33H18.3956L33.1284 18.1508M33.4276 47.8492L48.1604 33H63M33.278 48V18" />
      <Path d="M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33L63 33Z" />
    </InternalSVG>
  </Div>
);

export interface HeatExchangerMProps extends DivProps, SVGBasedPrimitiveProps {}

export const HeatExchangerM = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: HeatExchangerMProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("heat-exchanger-M"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="right" orientation={orientation} left={89} top={27.27} id="1" />
      <Handle location="right" orientation={orientation} left={89} top={72.73} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.545} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.455}
        id="4"
      />
      <Handle location="left" orientation={orientation} left={4.545} top={50} id="5" />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33L63 33Z" />
      <Path d="M58.9698 18H23.56L38.5623 33.0023M38.5623 32.9977L23.56 48H58.9698" />
    </InternalSVG>
  </Div>
);

export interface HeatExchangerStraightTubeProps
  extends DivProps,
    SVGBasedPrimitiveProps {}

export const HeatExchangerStraightTube = ({
  id,
  className,
  orientation = "right",
  color = "black",
  scale = 1,
  ...props
}: HeatExchangerStraightTubeProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("heat-exchanger-M"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="top" orientation={orientation} left={9} top={6.25} id="1" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={24}
        top={93.75}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={76} top={6.25} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={91}
        top={93.75}
        id="4"
      />
      <Handle location="left" orientation={orientation} left={1.508} top={50} id="5" />
      <Handle
        location="right"
        orientation={orientation}
        left={98.492}
        top={50}
        id="6"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 199, height: 48 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="3" y="3" width="193" height="42" rx="1" stroke-width="2" />
      <Rect x="32.397" y="3" width="134.206" height="42" rx="1" stroke-width="2" />
      <Rect x="32.397" y="13.5" width="134.206" height="21" rx="1" stroke-width="2" />
      <Line x1="32.3769" y1="24" x2="166.623" y2="24" stroke-width="2" />
    </InternalSVG>
  </Div>
);

export interface DiaphragmPumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const DiaphragmPump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: DiaphragmPumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M62 32C62 48.5685 48.5685 62 32 62M62 32C62 15.4315 48.5685 2 32 2C15.4315 2 2 15.4315 2 32C2 48.5685 15.4315 62 32 62M62 32L32 62M32 2.00269L62.0025 32.0052"
        stroke-linecap="round"
      />
      <Path
        d="M31 62C29.2204 62 27.3855 61.332 25.5927 59.9086C23.791 58.4782 22.0952 56.3316 20.6377 53.5381C19.1829 50.7496 18.0147 47.4106 17.214 43.7054C16.4137 40.0021 16 36.0237 16 32C16 27.9763 16.4137 23.9979 17.214 20.2946C18.0147 16.5895 19.1829 13.2504 20.6377 10.4619C22.0952 7.66841 23.791 5.52179 25.5927 4.09136C27.3855 2.66801 29.2204 2 31 2"
        stroke-width="2"
      />
    </InternalSVG>
  </Toggle>
);

export interface EjectionPumpProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const EjectionPump = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: EjectionPumpProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={50} top={3.125} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={96.875}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 64, height: 64 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M62 32C62 48.5685 48.5685 62 32 62M62 32C62 15.4315 48.5685 2 32 2C15.4315 2 2 15.4315 2 32C2 48.5685 15.4315 62 32 62M62 32L32 62M32 2.00269L62.0025 32.0052"
        stroke-linecap="round"
      />
      <Path
        d="M50.3827 20.3601C47.1902 21.7605 43.4002 22.8046 39.2752 23.4077C35.1519 24.0105 30.8103 24.1557 26.5584 23.8319C22.3057 23.508 18.2597 22.7238 14.7044 21.5418C11.1449 20.3584 8.19358 18.8149 6.03181 17.0454M6.02374 46.9613C8.18198 45.1925 11.129 43.6491 14.6841 42.465C18.2349 41.2824 22.2765 40.4968 26.5256 40.1707C30.774 39.8447 35.113 39.9871 39.2353 40.5866C43.3592 41.1864 47.15 42.2268 50.3455 43.6237"
        stroke-linecap="round"
      />
    </InternalSVG>
  </Toggle>
);

export interface CompressorProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const Compressor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: CompressorProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("compressor"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.55} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={95.45} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.55} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.45}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z"
        stroke-linecap="round"
      />
    </InternalSVG>
  </Toggle>
);

export interface TurboCompressorProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const TurboCompressor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: TurboCompressorProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.55} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={95.45} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.55} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.45}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z" />
      <Circle cx="33" cy="33" r="14.5" />
    </InternalSVG>
  </Toggle>
);

export interface RollerVaneCompressorProps
  extends ToggleProps,
    SVGBasedPrimitiveProps {}

export const RollerVaneCompressor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: RollerVaneCompressorProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.55} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={95.45} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.55} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.45}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z" />
      <Path d="M35 12.4V20.4" />
      <Path d="M3 33H16" />
      <Path d="M35 53.6V45.6" />
    </InternalSVG>
  </Toggle>
);

export interface LiquidRingCompressorProps
  extends ToggleProps,
    SVGBasedPrimitiveProps {}

export const LiquidRingCompressor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: LiquidRingCompressorProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.55} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={95.45} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.55} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.45}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z" />
      <Path d="M39 33C39 33.7879 38.8448 34.5681 38.5433 35.2961C38.2417 36.0241 37.7998 36.6855 37.2426 37.2426C36.6855 37.7998 36.0241 38.2417 35.2961 38.5433C34.5681 38.8448 33.7879 39 33 39C32.2121 39 31.4319 38.8448 30.7039 38.5433C29.9759 38.2417 29.3145 37.7998 28.7574 37.2426C28.2002 36.6855 27.7583 36.0241 27.4567 35.2961C27.1552 34.5681 27 33.7879 27 33C27 32.2121 27.1552 31.4319 27.4567 30.7039C27.7583 29.9759 28.2002 29.3145 28.7574 28.7574C29.3145 28.2002 29.9759 27.7583 30.7039 27.4567C31.4319 27.1552 32.2121 27 33 27C33.7879 27 34.5681 27.1552 35.2961 27.4567C36.0241 27.7583 36.6855 28.2002 37.2426 28.7574C37.7998 29.3145 38.2417 29.9759 38.5433 30.7039C38.8448 31.4319 39 32.2121 39 33L39 33Z" />
      <Path d="M39 33H47" />
      <Path d="M27 33H19" />
      <Path d="M36 27.804L40 20.8758" />
      <Path d="M30 27.804L26 20.8758" />
      <Path d="M30 38.196L26 45.1242" />
      <Path d="M36 38.196L40 45.1242" />
    </InternalSVG>
  </Toggle>
);

export interface EjectorCompressorProps extends ToggleProps, SVGBasedPrimitiveProps {}

export const EjectorCompressor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: EjectorCompressorProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.55} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={95.45} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.55} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.45}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z" />
      <Path d="M49.1214 16.2515C43.5325 21.3055 36.2463 24.0711 28.7115 23.9986C21.1766 23.9262 13.945 21.0209 8.45428 15.8604M8.4838 50.112C13.9718 44.968 21.1918 42.0733 28.7133 42.0014C36.2348 41.9295 43.5089 44.6858 49.0942 49.7239" />
    </InternalSVG>
  </Toggle>
);

export interface CentrifugalCompressorProps
  extends ToggleProps,
    SVGBasedPrimitiveProps {}

export const CentrifugalCompressor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: CentrifugalCompressorProps): ReactElement => (
  <Toggle
    {...props}
    className={CSS(CSS.B("pump"), className)}
    orientation={orientation}
  >
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={4.55} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={95.45} top={50} id="2" />
      <Handle location="top" orientation={orientation} left={50} top={4.55} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={50}
        top={95.45}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 66, height: 66 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path d="M17 7.59998L59.5394 18.9984M17 58.3984L59.5394 47M63 33C63 36.9397 62.224 40.8407 60.7164 44.4805C59.2087 48.1203 56.999 51.4274 54.2132 54.2132C51.4274 56.999 48.1203 59.2087 44.4805 60.7164C40.8407 62.224 36.9397 63 33 63C29.0603 63 25.1593 62.224 21.5195 60.7164C17.8797 59.2087 14.5726 56.999 11.7868 54.2132C9.00104 51.4274 6.79125 48.1203 5.28361 44.4805C3.77597 40.8407 3 36.9397 3 33C3 29.0603 3.77597 25.1593 5.28362 21.5195C6.79126 17.8797 9.00104 14.5726 11.7868 11.7868C14.5726 9.00104 17.8797 6.79125 21.5195 5.28361C25.1593 3.77597 29.0603 3 33 3C36.9397 3 40.8407 3.77597 44.4805 5.28362C48.1203 6.79126 51.4274 9.00104 54.2132 11.7868C56.999 14.5726 59.2087 17.8797 60.7164 21.5195C62.224 25.1593 63 29.0603 63 33Z" />
      <Path d="M3 33H63" />
    </InternalSVG>
  </Toggle>
);

export interface FlameArrestorProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlameArrestor = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: FlameArrestorProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flame-arrestor"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={7.575} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={92.425}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 33, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Path
        d="M16.5 2.5L16.5 66.5M2.5 34.5H30.5M2.5 18.9848H30.5M2.5 50.0152H30.5M5.3 66.5H27.7C29.2464 66.5 30.5 65.1976 30.5 63.5909V5.40909C30.5 3.80244 29.2464 2.5 27.7 2.5H5.3C3.7536 2.5 2.5 3.80245 2.5 5.40909V63.5909C2.5 65.1976 3.7536 66.5 5.3 66.5Z"
        stroke-linecap="round"
      />
    </InternalSVG>
  </Div>
);

export interface FlameArrestorDetonationProps
  extends DivProps,
    SVGBasedPrimitiveProps {}

export const FlameArrestorDetonation = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: FlameArrestorDetonationProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flame-arrestor"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.333} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.667}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 63, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2.5" width="28" height="64" rx="3" />
      <Path d="M16 2.5L16 66.5" />
      <Path d="M2 34.5H30" />
      <Path d="M2 19H30" />
      <Path d="M2 50H30" />
      <Path d="M29.121 3.37903L61 34.5" />
      <Path d="M29.12 65.62L61 34.5" />
    </InternalSVG>
  </Div>
);

export interface FlameArrestorExplosionProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlameArrestorExplosion = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: FlameArrestorExplosionProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flame-arrestor"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.333} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.667}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 60, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2.5" width="56" height="64" rx="3" />
      <Path d="M30 2.5L30 66.5" />
      <Path d="M16 2.5L16 66.5" />
      <Path d="M2 34.5H30" />
      <Path d="M2 19H30" />
      <Path d="M2 50H30" />
    </InternalSVG>
  </Div>
);

export interface FlameArrestorFireResProps extends DivProps, SVGBasedPrimitiveProps {}

export const FlameArrestorFireRes = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: FlameArrestorFireResProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flame-arrestor"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.333} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.667}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 63, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2.5" width="28" height="64" rx="3" />
      <Path d="M16 2.5L16 66.5" />
      <Path d="M2 34.5H30" />
      <Path d="M2 19H30" />
      <Path d="M2 50H30" />
      <Path
        d="M29 2.5C33.2023 2.5 37.3635 3.3277 41.2459 4.93586C45.1283 6.54401 48.656 8.90111 51.6274 11.8726C54.5989 14.8441 56.956 18.3717 58.5642 22.2541C60.1723 26.1366 61 30.2977 61 34.5C61 38.7023 60.1723 42.8635 58.5642 46.7459C56.956 50.6283 54.5989 54.1559 51.6274 57.1274C48.6559 60.0989 45.1283 62.456 41.2459 64.0641C37.3635 65.6723 33.2023 66.5 29 66.5"
        stroke-linecap="square"
      />
      <Line x1="27" y1="66.5" x2="29" y2="66.5" />
      <Line x1="27" y1="2.5" x2="29" y2="2.5" />
    </InternalSVG>
  </Div>
);

export interface FlameArrestorFireResDetonationProps
  extends DivProps,
    SVGBasedPrimitiveProps {}

export const FlameArrestorFireResDetonation = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: FlameArrestorFireResDetonationProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("flame-arrestor"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.333} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.667}
        top={50}
        id="2"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 63, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2.5" width="28" height="64" rx="3" />
      <Path d="M16 2.5L16 66.5" />
      <Path d="M2 34.5H30" />
      <Path d="M2 19H30" />
      <Path d="M2 50H30" />
      <Path d="M29.121 3.37903L61 34.5" />
      <Path d="M29.12 65.62L61 34.5" />
      <Path d="M29 2.5C33.2023 2.5 37.3635 3.3277 41.2459 4.93586C45.1283 6.54401 48.656 8.90111 51.6274 11.8726C54.5989 14.8441 56.956 18.3717 58.5642 22.2541C60.1723 26.1366 61 30.2977 61 34.5C61 38.7023 60.1723 42.8635 58.5642 46.7459C56.956 50.6283 54.5989 54.1559 51.6274 57.1274C48.6559 60.0989 45.1283 62.456 41.2459 64.0641C37.3635 65.6723 33.2023 66.5 29 66.5" />
      <Line x1="27" y1="66.5" x2="29" y2="66.5" />
      <Line x1="27" y1="2.5" x2="29" y2="2.5" />
    </InternalSVG>
  </Div>
);

export interface ThrusterProps extends DivProps, SVGBasedPrimitiveProps {}

export const Thruster = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: ThrusterProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("thruster"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={3.125} top={50} id="1" />
      <Handle
        location="right"
        orientation={orientation}
        left={96.875}
        top={50}
        id="2"
      />
      <Handle location="top" orientation={orientation} left={25.3} top={4.76} id="3" />
      <Handle
        location="bottom"
        orientation={orientation}
        left={25.3}
        top={95.24}
        id="4"
      />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 81, height: 42 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2.5" y="2" width="38" height="38" rx="3" />
      <Path d="M78.5 37.5117V4.51172" />
      <Path d="M40.5 11.5L76.0072 2.6232" />
      <Path d="M40.5 30.5L76.0072 39.3768" />
      <Path d="M75.6192 2.71597C75.9231 2.56695 76.2597 2.49745 76.5977 2.51399C76.9357 2.53052 77.264 2.63256 77.5518 2.81053C77.8397 2.98851 78.0776 3.23661 78.2435 3.53161C78.4093 3.82661 78.4975 4.15886 78.4999 4.49726" />
      <Path d="M78.4994 37.5101C78.4914 37.8382 78.4028 38.1592 78.2414 38.445C78.0801 38.7307 77.8509 38.9723 77.574 39.1486C77.2972 39.3248 76.9813 39.4302 76.6541 39.4555C76.3269 39.4808 75.9986 39.4252 75.698 39.2936" />
    </InternalSVG>
  </Div>
);

export interface StrainerProps extends DivProps, SVGBasedPrimitiveProps {}

export const Strainer = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: StrainerProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("strainer"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={6.06} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={93.04} top={50} id="2" />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 33, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="29" height="65" rx="1" />
      <Path d="M2.293 2.29297L29.9383 66.7986" stroke-dasharray="6 6" />
    </InternalSVG>
  </Div>
);

export interface StrainerConeProps extends DivProps, SVGBasedPrimitiveProps {}

export const StrainerCone = ({
  color,
  className,
  orientation = "left",
  scale,
  ...props
}: StrainerConeProps): ReactElement => (
  <Div {...props} className={CSS(CSS.B("strainer"), className)}>
    <HandleBoundary orientation={orientation}>
      <Handle location="left" orientation={orientation} left={6.06} top={50} id="1" />
      <Handle location="right" orientation={orientation} left={93.04} top={50} id="2" />
    </HandleBoundary>
    <InternalSVG
      dimensions={{ width: 33, height: 69 }}
      color={color}
      orientation={orientation}
      scale={scale}
    >
      <Rect x="2" y="2" width="29" height="65" rx="1" />
      <Path d="M31 34.5L2.30611 2.33992" stroke-dasharray="6 6" />
      <Path d="M31 34.5L2.30611 66.6601" stroke-dasharray="6 6" />
    </InternalSVG>
  </Div>
);

export interface GaugeProps extends DivProps {
  dims: dimensions.Dimensions;
}

export const Gauge = ({ dims }: GaugeProps) => (
  <Div style={{ width: dims.width, height: dims.height }}></Div>
);
